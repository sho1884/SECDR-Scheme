;;; Copyright (c) 1990, 91, 92 by Christian Queinnec. All rights reserved.

;;;                            ***********************************
;;;                            SECDR Scheme Adaptation for Meroon
;;;                            ***********************************

;;;     for SECDR Scheme
;;;     Date revised    25-Nov-1992 by Shoichi Hayashi

;;; This file contains the necessary adaptation for SECDR Scheme.
;;; You must load it as in:
;;;  (load "meroon.secdr")
;;;  (load "meroon.scm")

;;; You can compile it saying: 
;;;  (load "meroon.secdr")
;;;  (load "meroon.scm")
;;;  (compile-file "meroon.secdr" "meroon.scm" "meroon.bin")
;;; You can load it as in:
;;;  (bin-load "meroon.bin") or (ex-load "meroon")

;;; This program is distributed in the hope that it will be useful.
;;; Use and copying of this software and preparation of derivative works
;;; based upon this software are permitted, so long as the following
;;; conditions are met:
;;;      o credit to the authors is acknowledged following current
;;;        academic behaviour
;;;      o no fees or compensation are charged for use, copies, or
;;;        access to this software
;;;      o this copyright notice is included intact.
;;; This software is made available AS IS, and no warranty is made about 
;;; the software or its performance. 

;;; Bug descriptions, use reports, comments or suggestions are welcome.
;;; Send them to    
;;;   <queinnec@polytechnique.fr>   or to:   <Christian.Queinnec@inria.fr>
;;;                                 or to:
;;;   Christian Queinnec                     Christian Queinnec
;;;   Laboratoire d'Informatique de l'X      INRIA -- Rocquencourt
;;;   Ecole Polytechnique                    Domaine de Voluceau, BP 105
;;;   91128 Palaiseau                        78153 Le Chesnay Cedex
;;;   France                                 France

;;;************************************************
;;;    Small, Efficient and Innovative Class System
;;;       Christian Queinnec  
;;;   \'Ecole Polytechnique & INRIA-Rocquencourt
;;;************************************************

;;; This is incorrect but gives a flavor of what does define-oo-macro.
(macro define-oo-macro
   (lambda (call)  ; call = (define-oo-macro (name vars...) body...)
     `(macro ,(car (cadr call)) 
     	     (lambda (call)
               (apply (lambda ,(cdr (cadr call)) ,@(cddr call))
                      (cdr call) ) ) ) ) )

(define (oo-concat . names)
  (string->symbol
   (apply string-append
          (map (lambda (thing)
                    (cond ((symbol? thing) 
                           (symbol->string thing) )
                          ((string? thing) thing)
                          ((number? thing)
                           (number->string thing) )
                          (else (error "non coercible to String"
                                        thing )) ) )
                  names ) ) ) )

(define (flat l)
  (define (flatten l r)
    (cond ((pair? l)
           (flatten (car l) (flatten (cdr l) r)) )
          ((null? l) r)
          (else (cons l r)) ) )
  (flatten l '()) )

(define (mapcan f l)
  (if (pair? l)
      (append (f (car l)) (mapcan f (cdr l)))
      '() ) )

(define oo-apply apply)
(define oo-error error)

(extend-syntax (oo-set!)
  ((oo-set! variable form)
   (global-define variable form) ) )

(define (remove item list)
  (if (pair? list)
      (if (equal? item (car list))
          (cdr list)
          (cons (car list) (remove item (cdr list))) )
      list ) )

(define (every? p . args)
  (let andmap ((args args) (value #t))
    (if (let any-at-end? ((ls args))
          (and (pair? ls)
               (or (not (pair? (car ls)))
                   (any-at-end? (cdr ls)))))
        value
        (let ((value (apply p (map car args))))
          (and value (andmap (map cdr args) value))))))

;(define (map proc arg . rest)
;  (define (map1 proc list)
;    (if (pair? list)
;      (cons (proc (car list)) (map1 proc (tail list)))
;      '()))
;  (define (maps proc dlist)
;    (if (every? pair? dlist)
;      (cons (apply proc (map1 car dlist))
;            (maps proc (map1 tail dlist)))
;      '()))
;  (if (pair? rest)
;    (maps proc (cons arg rest))
;    (map1 proc arg)))

;(define (for-each proc . args)
;  (let for-each-loop ((dlist args))
;    (if (every? pair? dlist)
;      (begin (apply proc (map car dlist))
;             (for-each-loop (map tail dlist)))
;      #v)))

;(define-oo-macro (unless condition . body)
;  `(if ,condition #f (begin . ,body)) )

;(define-oo-macro (when condition . body)
;  `(if ,condition (begin . ,body)) )

;;; End of meroon.secdr
