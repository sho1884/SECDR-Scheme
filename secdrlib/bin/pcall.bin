(#3 () #14 stack-of-marker #8)(#4 (#3 () #7 #3 () #15 #3 () #15 #3 () #15 #4 (#3 () #7 #4 (#3 () #7 #3 () #15 #0 (0 . 0) #15 #2 cons #5 #11 (1 . 0) #3 () #7 #2 stack-of-marker #15 #0 (1 . 0) #15 #2 cons #5 #13 stack-of-marker #3 () #7 #3 () #7 #0 (1 . 0) #15 #0 (2 . 0) #5 #15 #4 (#3 () #7 #3 () #15 #3 () #7 #2 stack-of-marker #15 #2 car #5 #15 #2 set-car! #5 #0 (0 . 0) #8) #6 #8) #15 #2 call/cc #5 #11 (0 . 1) #3 () #7 #3 () #7 #3 () #7 #2 stack-of-marker #15 #2 caar #5 #15 #2 null? #5 #15 #2 not #5 #9 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 obsolete-stack! #5 #3 () #7 #0 (1 . 1) #5 #11 (1 . 1) #3 () #7 #3 () #15 #3 () #7 #2 stack-of-marker #15 #2 car #5 #15 #2 set-car! #6 #8) #6 #8) (#3 #f #8) #3 () #7 #2 stack-of-marker #15 #2 car #5 #11 (0 . 2) #3 () #7 #2 stack-of-marker #15 #2 cdr #5 #13 stack-of-marker #3 () #7 #3 () #7 #0 (0 . 2) #15 #2 cdr #5 #15 #2 null? #5 #10 (#3 () #7 #4 (#0 (1 . 1) #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 1) #15 #3 () #7 #0 (1 . 2) #15 #2 cdr #5 #6 #8) #6 #8) (#3 () #8) #8) #8) #6 #8) #14 splitter #8)(#4 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 null? #5 #15 #2 not #6 #8) #14 in-dynamic-extent? #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 null? #5 #10 (#3 () #7 #3 "obsolete splitter" #15 #2 wrong #6 #8) (#3 () #7 #0 (0 . 1) #15 #3 () #7 #0 (0 . 0) #15 #2 car #5 #6 #8) #8) #14 abort #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 null? #5 #10 (#3 () #7 #3 "out of extent" #15 #2 wrong #6 #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #0 (0 . 0) #15 #2 make-pc #5 #15 #0 (1 . 1) #6 #8) #15 #2 call/cc #6 #8) #8) #14 call/pc #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 stack-of-marker #15 #2 marker-prefix #5 #15 #4 (#4 (#3 () #7 #4 (#3 () #7 #3 () #7 #2 stack-of-marker #15 #3 () #7 #0 (0 . 0) #15 #3 #t #15 #2 cons #5 #15 #2 cons #5 #15 #0 (2 . 0) #15 #2 append #5 #13 stack-of-marker #3 () #7 #0 (1 . 0) #15 #0 (3 . 0) #6 #8) #15 #2 call/cc #6 #8) #8) #6 #8) #14 make-pc #8)(#4 (#3 () #7 #0 (0 . 1) #15 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 eq? #5 #10 (#3 () #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 marker-prefix #5 #15 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdar #5 #15 #3 #t #15 #2 cons #5 #15 #2 cons #6 #8) #8) #14 marker-prefix #8)(#4 (#3 () #7 #0 (0 . 0) #15 #3 () #7 #2 stack-of-marker #15 #2 car #5 #15 #2 eq? #5 #10 (#0 (0 . 0) #8) (#3 () #7 #4 (#3 () #7 #3 () #15 #3 () #7 #2 stack-of-marker #15 #2 car #5 #15 #2 set-car! #5 #3 () #7 #2 stack-of-marker #15 #2 cdr #5 #13 stack-of-marker #3 () #7 #0 (1 . 0) #15 #2 obsolete-stack! #6 #8) #6 #8) #8) #14 obsolete-stack! #8)(#3 0 #14 *serial-counter* #8)(#4 (#3 () #7 #3 () #15 #3 () #15 #3 () #15 #3 () #15 #3 () #15 #3 () #15 #4 (#3 wait #11 (0 . 0) #3 #f #11 (0 . 1) #3 () #11 (0 . 2) #3 () #11 (0 . 3) #3 () #7 #4 (#3 () #7 #2 *serial-counter* #15 #3 1 #15 #2 + #5 #13 *serial-counter* #2 *serial-counter* #8) #5 #11 (0 . 4) #4 (#3 () #7 #0 (0 . 0) #15 #4 (#3 () #7 #3 (show) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #0 (3 . 0) #15 #2 cons #5 #15 #3 = #15 #2 cons #5 #15 #3 value #15 #2 cons #5 #15 #0 (3 . 2) #15 #2 cons #5 #15 #3 = #15 #2 cons #5 #15 #3 dependent* #15 #2 cons #5 #15 #3 () #7 #0 (3 . 3) #15 #4 (#3 () #7 #3 id #15 #0 (0 . 0) #6 #8) #15 #2 map #5 #15 #2 cons #5 #15 #3 = #15 #2 cons #5 #15 #3 suspension* #15 #2 cons #5 #15 #0 (3 . 1) #15 #2 cons #5 #15 #3 = #15 #2 cons #5 #15 #3 set? #15 #2 cons #5 #15 #0 (3 . 4) #15 #2 cons #5 #15 #3 place #15 #2 cons #6 #8) #6 #8) (#3 () #7 #3 (id) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#0 (3 . 4) #8) #6 #8) (#3 () #7 #3 (valued?) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#0 (3 . 1) #8) #6 #8) (#3 () #7 #3 (set!) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#0 (3 . 1) #9 (#3 () #7 #4 (#3 () #7 #0 (4 . 5) #15 #3 "A place cannot be assigned more than once!" #15 #2 wrong #6 #8) #6 #8) (#3 #f #8) #3 () #7 #1 (2 . 1) #15 #2 car #5 #11 (3 . 0) #3 #t #11 (3 . 1) #3 () #7 #0 (3 . 3) #15 #0 (3 . 2) #15 #4 (#3 () #11 (4 . 2) #3 () #7 #3 () #7 #0 (0 . 0) #15 #4 (#4 (#3 () #7 #0 (6 . 0) #15 #0 (1 . 0) #6 #8) #8) #15 #2 map #5 #15 #2 spawn-threads #5 #3 () #11 (4 . 3) #3 () #7 #3 () #7 #0 (0 . 1) #15 #4 (#4 (#3 () #7 #3 compute! #15 #0 (1 . 0) #6 #8) #8) #15 #2 map #5 #15 #2 spawn-threads #6 #8) #6 #8) #6 #8) (#3 () #7 #3 (ref) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#0 (3 . 1) #10 (#0 (3 . 0) #8) (#3 () #7 #4 (#3 () #7 #0 (4 . 2) #15 #0 (0 . 0) #15 #2 cons #5 #11 (4 . 2) #3 () #7 #2 blackhole #6 #8) #15 #2 call/cc #6 #8) #8) #6 #8) (#3 () #7 #3 (pursue) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#0 (3 . 1) #10 (#3 () #7 #0 (3 . 0) #15 #3 () #7 #1 (2 . 1) #15 #2 car #5 #6 #8) (#3 () #7 #3 () #7 #0 (3 . 5) #15 #3 () #7 #1 (2 . 1) #15 #2 car #5 #15 #2 make-suspension #5 #15 #4 (#3 () #7 #0 (4 . 3) #15 #0 (0 . 0) #15 #2 cons #5 #11 (4 . 3) #0 (0 . 0) #8) #6 #8) #8) #6 #8) (#3 #t #10 (#3 () #7 #4 (#3 () #7 #0 (3 . 5) #15 #0 (2 . 0) #15 #3 "Does not understand" #15 #2 wrong #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #8) #8) #8) #8) #6 #8) #11 (0 . 5) #0 (0 . 5) #8) #6 #8) #14 make-place #8)(#4 (#3 () #7 #3 () #15 #3 () #15 #3 () #15 #3 () #15 #3 () #15 #3 () #15 #4 (#3 wait #11 (0 . 0) #3 #f #11 (0 . 1) #3 () #11 (0 . 2) #3 () #11 (0 . 3) #3 () #7 #4 (#3 () #7 #2 *serial-counter* #15 #3 1 #15 #2 + #5 #13 *serial-counter* #2 *serial-counter* #8) #5 #11 (0 . 4) #4 (#3 () #7 #0 (0 . 0) #15 #4 (#3 () #7 #3 (show) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #0 (3 . 0) #15 #2 cons #5 #15 #3 = #15 #2 cons #5 #15 #3 value #15 #2 cons #5 #15 #0 (3 . 2) #15 #2 cons #5 #15 #3 = #15 #2 cons #5 #15 #3 dependent* #15 #2 cons #5 #15 #3 () #7 #0 (3 . 3) #15 #4 (#3 () #7 #3 id #15 #0 (0 . 0) #6 #8) #15 #2 map #5 #15 #2 cons #5 #15 #3 = #15 #2 cons #5 #15 #3 suspension* #15 #2 cons #5 #15 #0 (3 . 1) #15 #2 cons #5 #15 #3 = #15 #2 cons #5 #15 #3 set? #15 #2 cons #5 #15 #3 () #7 #3 id #15 #0 (4 . 1) #5 #15 #2 cons #5 #15 #3 = #15 #2 cons #5 #15 #3 depends-on #15 #2 cons #5 #15 #0 (3 . 4) #15 #2 cons #5 #15 #3 suspension #15 #2 cons #6 #8) #6 #8) (#3 () #7 #3 (id) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#0 (3 . 4) #8) #6 #8) (#3 () #7 #3 (compute!) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 ref #15 #0 (4 . 1) #5 #15 #0 (4 . 0) #5 #11 (3 . 0) #3 #t #11 (3 . 1) #3 () #7 #0 (3 . 3) #15 #0 (3 . 2) #15 #4 (#3 () #11 (4 . 2) #3 () #7 #3 () #7 #0 (0 . 0) #15 #4 (#4 (#3 () #7 #0 (6 . 0) #15 #0 (1 . 0) #6 #8) #8) #15 #2 map #5 #15 #2 spawn-threads #5 #3 () #11 (4 . 3) #3 () #7 #3 () #7 #0 (0 . 1) #15 #4 (#4 (#3 () #7 #3 compute! #15 #0 (1 . 0) #6 #8) #8) #15 #2 map #5 #15 #2 spawn-threads #6 #8) #6 #8) #6 #8) (#3 () #7 #3 (ref) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#0 (3 . 1) #10 (#0 (3 . 0) #8) (#3 () #7 #4 (#3 () #7 #0 (4 . 2) #15 #0 (0 . 0) #15 #2 cons #5 #11 (4 . 2) #3 () #7 #2 blackhole #6 #8) #15 #2 call/cc #6 #8) #8) #6 #8) (#3 () #7 #3 (pursue) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#0 (3 . 1) #10 (#3 () #7 #0 (3 . 0) #15 #3 () #7 #1 (2 . 1) #15 #2 car #5 #6 #8) (#3 () #7 #3 () #7 #0 (3 . 5) #15 #3 () #7 #1 (2 . 1) #15 #2 car #5 #15 #2 make-suspension #5 #15 #4 (#3 () #7 #0 (4 . 3) #15 #0 (0 . 0) #15 #2 cons #5 #11 (4 . 3) #0 (0 . 0) #8) #6 #8) #8) #6 #8) (#3 #t #10 (#3 () #7 #4 (#3 () #7 #0 (3 . 5) #15 #0 (2 . 0) #15 #3 "Does not understand" #15 #2 wrong #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #8) #8) #8) #6 #8) #11 (0 . 5) #0 (0 . 5) #8) #6 #8) #14 make-suspension #8)(#4 (#3 () #7 #3 ref #15 #0 (0 . 0) #6 #8) #14 touch #8)(#4 (#3 () #7 #0 (0 . 1) #15 #3 pursue #15 #0 (0 . 0) #6 #8) #14 pursue #8)(#4 (#3 () #7 #0 (0 . 1) #15 #3 set! #15 #0 (0 . 0) #6 #8) #14 assign! #8)(#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #0 (0 . 0) #15 #3 (future form) #15 #3 (future) #15 #2 syntax-match? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (1 . 0) #15 #2 cadr #5 #15 #2 cons #5 #15 #3 () #15 #2 cons #5 #15 #3 lambda #15 #2 cons #5 #15 #2 cons #5 #15 #3 create-future #15 #2 cons #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #3 "invalid syntax " #15 #3 future #15 #2 error #6 #8) #6 #8) (#3 () #8) #8) #8) #15 #3 %macro-special-form% #15 #3 future #15 #2 put #5 #3 future #8) #6 #8)(#4 (#3 () #7 #3 () #7 #2 make-place #5 #15 #4 (#3 () #7 #3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #5 #15 #0 (1 . 0) #15 #2 assign! #5 #3 () #7 #2 blackhole #6 #8) #15 #2 list #5 #15 #2 spawn-threads #5 #0 (0 . 0) #8) #6 #8) #14 create-future #8)(#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #0 (0 . 0) #15 #3 (freeze form) #15 #3 (freeze) #15 #2 syntax-match? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (1 . 0) #15 #2 cadr #5 #15 #2 cons #5 #15 #3 () #15 #2 cons #5 #15 #3 lambda #15 #2 cons #5 #15 #2 cons #5 #15 #3 create-frozen #15 #2 cons #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #3 "invalid syntax " #15 #3 freeze #15 #2 error #6 #8) #6 #8) (#3 () #8) #8) #8) #15 #3 %macro-special-form% #15 #3 freeze #15 #2 put #5 #3 freeze #8) #6 #8)(#4 (#3 () #7 #3 () #7 #2 make-place #5 #15 #3 #f #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #4 (#3 () #7 #3 (ref) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#0 (3 . 0) #9 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (5 . 0) #5 #15 #0 (4 . 1) #15 #2 assign! #5 #3 #t #11 (4 . 0) #8) #6 #8) #3 () #7 #0 (3 . 1) #15 #2 touch #6 #8) #6 #8) (#3 () #7 #3 (show) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 show #15 #0 (3 . 1) #5 #15 #0 (3 . 0) #15 #2 cons #5 #15 #3 = #15 #2 cons #5 #15 #3 set? #15 #2 cons #5 #15 #3 freeze #15 #2 cons #6 #8) #6 #8) (#3 #t #10 (#3 () #7 #4 (#3 () #7 #0 (3 . 1) #15 #0 (2 . 0) #15 #3 "Does not understand" #15 #2 wrong #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #6 #8) #8) #6 #8) #14 create-frozen #8)(#4 (#3 () #7 #0 (0 . 0) #15 #2 touch #6 #8) #14 unfreeze #8)(#3 defined-below #14 blackhole #8)(#3 defined-below #14 spawn-threads #8)(#3 defined-below #14 resume-scheduler #8)(#4 (#3 () #7 #4 (#3 () #7 #3 () #15 #3 () #15 #3 () #15 #4 (#3 () #11 (0 . 0) #3 () #11 (0 . 1) #4 (#3 () #7 #0 (1 . 1) #15 #0 (0 . 0) #15 #2 cons #5 #11 (1 . 1) #3 () #7 #0 (0 . 0) #15 #2 resume-scheduler #6 #8) #11 (0 . 2) #4 (#3 () #7 #0 (1 . 0) #15 #2 pair? #5 #10 (#3 () #7 #4 (#0 (0 . 1) #11 (2 . 0) #3 () #7 #3 () #7 #3 go #15 #0 (0 . 0) #5 #15 #2 resume-scheduler #6 #8) #15 #0 (1 . 0) #15 #2 oneof #6 #8) (#3 () #7 #0 (1 . 1) #15 #0 (2 . 0) #6 #8) #8) #13 resume-scheduler #4 (#3 () #7 #0 (1 . 0) #15 #0 (0 . 0) #15 #2 append #5 #11 (1 . 0) #8) #13 spawn-threads #4 (#3 () #7 #3 blackhole #15 #2 resume-scheduler #6 #8) #13 blackhole #3 () #7 #3 () #7 #0 (2 . 0) #5 #15 #0 (0 . 2) #6 #8) #6 #8) #15 #2 call/cc #6 #8) #14 start-multithreads #8)(#4 (#3 () #7 #3 () #15 #3 () #15 #4 (#4 (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #0 (0 . 0) #15 #2 eq? #5 #10 (#3 () #7 #0 (0 . 1) #15 #2 cdr #6 #8) (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 1) #15 #2 cdr #5 #15 #0 (0 . 0) #15 #0 (1 . 0) #5 #15 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #2 cons #6 #8) #8) #11 (0 . 0) #4 (#3 () #7 #0 (0 . 1) #15 #2 pair? #5 #10 (#3 () #7 #3 0 #15 #0 (0 . 0) #15 #2 > #5 #10 (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 cdr #5 #15 #3 () #7 #3 1 #15 #0 (0 . 0) #15 #2 - #5 #15 #0 (1 . 1) #6 #8) (#3 () #7 #3 () #7 #0 (2 . 0) #15 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #0 (1 . 0) #5 #15 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #0 (2 . 1) #6 #8) #8) (#3 () #7 #0 (2 . 0) #15 #0 (0 . 0) #15 #0 (1 . 1) #6 #8) #8) #11 (0 . 1) #3 () #7 #0 (1 . 0) #15 #3 3 #15 #0 (0 . 1) #6 #8) #6 #8) #14 oneof #8)(#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #0 (0 . 0) #15 #3 (pcall form ...) #15 #3 (pcall) #15 #2 syntax-match? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 0) #15 #2 cons #5 #15 #3 () #15 #2 cons #5 #15 #3 lambda #15 #2 cons #6 #8) #15 #2 map #5 #15 #3 spawn-pcall #15 #2 cons #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #3 "invalid syntax " #15 #3 pcall #15 #2 error #6 #8) #6 #8) (#3 () #8) #8) #8) #15 #3 %macro-special-form% #15 #3 pcall #15 #2 put #5 #3 pcall #8) #6 #8)(#3 wait #14 already-computed-argument? #8)(#3 wait #14 make-pcall-frame #8)(#3 () #7 #3 () #7 #3 "undef" #15 #2 list #5 #15 #4 (#4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #3 () #7 #3 () #7 #0 (0 . 1) #15 #3 3 #15 #2 + #5 #15 #0 (0 . 0) #15 #2 vector-ref #5 #15 #2 eq? #5 #15 #2 not #6 #8) #13 already-computed-argument? #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #3 () #7 #3 3 #15 #0 (0 . 0) #15 #2 + #5 #15 #2 make-vector #5 #15 #4 (#3 () #7 #3 () #15 #3 0 #15 #0 (0 . 0) #15 #2 vector-set! #5 #3 () #7 #0 (1 . 0) #15 #3 2 #15 #0 (0 . 0) #15 #2 vector-set! #5 #0 (0 . 0) #8) #6 #8) #13 make-pcall-frame #3 #f #8) #6 #8)(#4 (#3 () #7 #3 0 #15 #3 () #7 #3 2 #15 #0 (0 . 0) #15 #2 vector-ref #5 #15 #2 = #6 #8) #14 pcall-frame-ready? #8)(#4 (#3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 already-computed-argument? #5 #9 (#3 () #7 #0 (0 . 0) #15 #2 pcall-frame-ready? #5 #10 (#3 () #7 #0 (0 . 2) #15 #3 () #7 #0 (0 . 1) #15 #3 3 #15 #2 + #5 #15 #0 (0 . 0) #15 #2 vector-set! #6 #8) (#3 () #7 #3 () #7 #3 () #7 #3 0 #15 #0 (0 . 0) #15 #2 vector-ref #5 #15 #3 () #7 #0 (0 . 2) #15 #0 (0 . 1) #15 #2 cons #5 #15 #2 cons #5 #15 #3 0 #15 #0 (0 . 0) #15 #2 vector-set! #6 #8) #8) (#3 () #7 #4 (#3 () #7 #0 (1 . 2) #15 #3 () #7 #0 (1 . 1) #15 #3 3 #15 #2 + #5 #15 #0 (1 . 0) #15 #2 vector-set! #5 #3 () #7 #3 () #7 #3 1 #15 #3 () #7 #3 2 #15 #0 (1 . 0) #15 #2 vector-ref #5 #15 #2 - #5 #15 #3 2 #15 #0 (1 . 0) #15 #2 vector-set! #6 #8) #6 #8) #3 () #7 #0 (0 . 0) #15 #2 pcall-frame-ready? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 perform-applications #6 #8) #6 #8) (#3 #f #8) #8) #14 store-value-in-pcall-frame #8)(#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #3 () #15 #3 () #7 #3 1 #15 #3 () #7 #0 (2 . 0) #15 #2 vector-length #5 #15 #2 - #5 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #3 2 #15 #0 (0 . 0) #15 #2 = #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (2 . 1) #15 #2 cdr #5 #15 #3 () #7 #0 (2 . 1) #15 #2 car #5 #15 #2 apply #5 #15 #3 () #7 #3 1 #15 #0 (6 . 0) #15 #2 vector-ref #5 #6 #8) #15 #2 list #5 #15 #2 spawn-threads #6 #8) #6 #8) (#3 () #7 #4 (#3 () #7 #0 (1 . 1) #15 #3 () #7 #0 (1 . 0) #15 #0 (5 . 0) #15 #2 vector-ref #5 #15 #2 cons #5 #11 (1 . 1) #3 () #7 #0 (1 . 1) #15 #3 () #7 #3 1 #15 #0 (1 . 0) #15 #2 - #5 #15 #0 (2 . 0) #6 #8) #6 #8) #8) #11 (0 . 0) #8) #5 #6 #8) #11 (0 . 0) #3 () #7 #0 (0 . 0) #5 #3 () #7 #3 () #7 #3 0 #15 #0 (1 . 0) #15 #2 vector-ref #5 #15 #2 pair? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 0 #15 #0 (2 . 0) #15 #2 vector-ref #5 #15 #4 (#3 () #7 #3 () #15 #3 0 #15 #0 (3 . 0) #15 #2 vector-set! #5 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 reverse! #5 #15 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #0 (4 . 0) #15 #2 vector-set! #5 #3 () #7 #0 (3 . 0) #6 #8) #15 #2 for-each #6 #8) #6 #8) #6 #8) (#3 #f #8) #8) #6 #8) #14 perform-applications #8)(#4 (#3 () #7 #3 () #7 #3 () #7 #1 (0 . 0) #15 #2 length #5 #15 #2 make-pcall-frame #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (0 . 0) #15 #3 1 #15 #0 (1 . 0) #15 #2 vector-set! #5 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #1 (2 . 0) #15 #2 length #5 #15 #3 0 #15 #2 iota #5 #15 #1 (2 . 0) #15 #4 (#4 (#3 () #7 #3 () #7 #0 (1 . 0) #5 #15 #0 (1 . 1) #15 #0 (3 . 0) #15 #2 store-value-in-pcall-frame #6 #8) #8) #15 #2 map #5 #15 #2 spawn-threads #5 #3 () #7 #2 blackhole #6 #8) #15 #2 call/cc #6 #8) #6 #8) #14 spawn-pcall #8)(#4 (#3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 < #5 #10 (#3 () #7 #3 () #7 #0 (0 . 1) #15 #3 () #7 #0 (0 . 0) #15 #3 1 #15 #2 + #5 #15 #2 iota #5 #15 #0 (0 . 0) #15 #2 cons #6 #8) (#3 () #8) #8) #14 iota #8)