(#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 ((cdr call)) #15 #3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cddr #5 #15 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cadr #5 #15 #2 cdr #5 #15 #2 cons #5 #15 #3 lambda #15 #2 cons #5 #15 #2 cons #5 #15 #3 apply #15 #2 cons #5 #15 #2 cons #5 #15 #3 (call) #15 #2 cons #5 #15 #3 lambda #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cadr #5 #15 #2 car #5 #15 #2 cons #5 #15 #3 macro #15 #2 cons #6 #8) #15 #3 %macro-special-form% #15 #3 define-oo-macro #15 #2 put #5 #3 define-oo-macro #8) #6 #8)(#4 (#3 () #7 #3 () #7 #3 () #7 #1 (0 . 0) #15 #4 (#3 () #7 #0 (0 . 0) #15 #2 symbol? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 symbol->string #6 #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 string? #5 #10 (#3 () #7 #4 (#0 (1 . 0) #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 number? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 number->string #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #3 "non coercible to String" #15 #2 error #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #8) #15 #2 map #5 #15 #2 string-append #15 #2 apply #5 #15 #2 string->symbol #6 #8) #14 oo-concat #8)(#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 pair? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #0 (2 . 0) #5 #15 #3 () #7 #0 (1 . 0) #15 #2 car #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 null? #5 #10 (#3 () #7 #4 (#0 (1 . 1) #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 1) #15 #0 (1 . 0) #15 #2 cons #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #11 (0 . 0) #3 () #7 #3 () #15 #0 (1 . 0) #15 #0 (0 . 0) #6 #8) #6 #8) #14 flat #8)(#4 (#3 () #7 #0 (0 . 1) #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 1) #15 #2 cdr #5 #15 #0 (0 . 0) #15 #2 mapcan #5 #15 #3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #0 (0 . 0) #5 #15 #2 append #6 #8) (#3 () #8) #8) #14 mapcan #8)(#2 apply #14 oo-apply #8)(#2 error #14 oo-error #8)(#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #0 (0 . 0) #15 #3 (oo-set! variable form) #15 #3 (oo-set!) #15 #2 syntax-match? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (1 . 0) #15 #2 caddr #5 #15 #2 cons #5 #15 #3 () #7 #0 (1 . 0) #15 #2 cadr #5 #15 #2 cons #5 #15 #3 global-define #15 #2 cons #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #3 "invalid syntax " #15 #3 oo-set! #15 #2 error #6 #8) #6 #8) (#3 () #8) #8) #8) #15 #3 %macro-special-form% #15 #3 oo-set! #15 #2 put #5 #3 oo-set! #8) #6 #8)(#4 (#3 () #7 #0 (0 . 1) #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #0 (0 . 0) #15 #2 equal? #5 #10 (#3 () #7 #0 (0 . 1) #15 #2 cdr #6 #8) (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 1) #15 #2 cdr #5 #15 #0 (0 . 0) #15 #2 remove #5 #15 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #2 cons #6 #8) #8) (#0 (0 . 1) #8) #8) #14 remove #8)(#4 (#3 () #7 #3 #t #15 #1 (0 . 1) #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 cdr #5 #15 #0 (3 . 0) #6 #8) #15 #3 () #7 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 car #5 #15 #2 pair? #5 #15 #2 not #5 #15 #4 (#0 (0 . 0) #10 (#0 (0 . 0) #8) (#3 () #7 #0 (0 . 1) #6 #8) #8) #6 #8) #15 #3 () #7 #0 (0 . 0) #15 #2 pair? #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #6 #8) #11 (0 . 0) #8) #5 #5 #10 (#0 (0 . 1) #8) (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #15 #2 map #5 #15 #0 (2 . 0) #15 #2 apply #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #3 () #7 #0 (2 . 0) #15 #2 cdr #15 #2 map #5 #15 #0 (3 . 0) #6 #8) #15 #0 (0 . 0) #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #6 #8) #6 #8) #8) #11 (0 . 0) #8) #5 #6 #8) #14 every? #8)(#3 () #7 #3 #f #15 #3 #f #15 #3 #f #15 #3 #f #15 #3 #f #15 #3 #f #15 #3 #f #15 #3 #f #15 #3 #f #15 #3 #f #15 #2 vector #5 #14 *classes* #8)(#3 0 #14 *class-number* #8)(#3 () #7 #3 #f #15 #3 #f #15 #3 #f #15 #3 #f #15 #3 #f #15 #3 #f #15 #3 #f #15 #3 #f #15 #2 vector #5 #14 *generics* #8)(#3 0 #14 *generic-number* #8)(#3 () #7 #2 list #5 #14 *traced-generics* #8)(#3 #f #14 *last-meroon-anomaly* #8)(#4 (#3 () #7 #0 (0 . 2) #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 2) #15 #2 cdr #5 #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 lit #5 #15 #3 () #7 #0 (0 . 2) #15 #2 car #5 #15 #0 (0 . 0) #6 #8) (#0 (0 . 1) #8) #8) #14 lit #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 vector-length #5 #15 #4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 0) #15 #0 (0 . 0) #15 #2 < #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #0 (4 . 1) #15 #2 vector-ref #5 #15 #0 (4 . 0) #5 #3 () #7 #3 () #7 #0 (1 . 0) #15 #3 1 #15 #2 + #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 #f #8) #8) #11 (0 . 0) #3 () #7 #3 0 #15 #0 (0 . 0) #6 #8) #6 #8) #6 #8) #14 vector-map #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 vector-length #5 #15 #4 (#3 () #7 #3 () #7 #3 #f #15 #3 () #7 #1 (1 . 1) #15 #2 pair? #5 #9 (#3 () #7 #0 (0 . 0) #15 #3 () #7 #1 (1 . 1) #15 #2 car #5 #15 #2 max #6 #8) (#3 () #7 #3 () #7 #3 2 #15 #0 (0 . 0) #15 #2 quotient #5 #15 #3 1 #15 #0 (0 . 0) #15 #2 + #6 #8) #15 #2 make-vector #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (2 . 0) #15 #3 0 #15 #0 (1 . 0) #15 #0 (3 . 0) #15 #2 vector-copy! #5 #0 (1 . 0) #8) #6 #8) #6 #8) #6 #8) #14 vector-extend #8)(#4 (#3 () #7 #0 (0 . 2) #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 3) #15 #0 (0 . 0) #15 #2 < #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #0 (3 . 0) #15 #2 vector-ref #5 #15 #0 (1 . 0) #15 #0 (3 . 1) #15 #2 vector-set! #5 #3 () #7 #3 () #7 #3 1 #15 #0 (1 . 0) #15 #2 + #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 #f #8) #8) #11 (0 . 0) #8) #5 #6 #8) #14 vector-copy! #8)(#4 (#3 () #7 #0 (0 . 1) #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #0 (1 . 3) #6 #8) #6 #8) (#3 () #7 #0 (0 . 1) #15 #2 vector? #5 #10 (#3 () #7 #4 (#3 () #7 #3 0 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #0 (4 . 1) #15 #2 vector-ref #6 #8) #15 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 vector-length #5 #15 #0 (0 . 0) #15 #2 < #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #5 #10 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #0 (3 . 1) #15 #2 vector-ref #5 #15 #0 (3 . 2) #5 #15 #0 (3 . 0) #15 #2 eq? #5 #10 (#3 () #7 #0 (0 . 0) #15 #0 (3 . 1) #15 #2 vector-ref #6 #8) (#3 () #7 #3 () #7 #3 1 #15 #0 (0 . 0) #15 #2 + #5 #15 #0 (1 . 0) #6 #8) #8) (#3 () #7 #0 (3 . 0) #15 #0 (3 . 3) #6 #8) #8) #11 (0 . 0) #8) #5 #6 #8) #6 #8) (#3 () #7 #0 (0 . 1) #15 #2 pair? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 1) #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #0 (3 . 2) #5 #15 #0 (3 . 0) #15 #2 eq? #5 #10 (#3 () #7 #0 (0 . 0) #15 #2 car #6 #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #0 (1 . 0) #6 #8) #8) (#3 () #7 #0 (3 . 0) #15 #0 (3 . 3) #6 #8) #8) #11 (0 . 0) #8) #5 #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #14 sequence-find #8)(#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #0 (2 . 0) #15 #2 eq? #5 #10 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 pair? #5 #10 (#3 () #7 #0 (0 . 0) #15 #2 cadr #6 #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #3 "Incorrect list of options" #15 #3 define-class #15 #2 create-syntax-anomaly #5 #15 #2 meroon-error #6 #8) #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #4 (#3 () #7 #3 (:metaclass) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 cddr #5 #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 cddr #5 #15 #0 (3 . 0) #6 #8) (#3 () #7 #3 () #7 #0 (2 . 0) #15 #3 "Incorrect list of options" #15 #3 define-class #15 #2 create-syntax-anomaly #5 #15 #2 meroon-error #6 #8) #8) #6 #8) (#3 () #7 #3 (:prototype :mutable :careless) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 cdr #5 #15 #0 (3 . 0) #6 #8) #6 #8) (#3 #t #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 cdr #5 #15 #0 (3 . 0) #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #6 #8) #8) (#3 () #7 #0 (2 . 0) #15 #0 (2 . 2) #6 #8) #8) #11 (0 . 0) #3 () #7 #0 (1 . 1) #15 #0 (0 . 0) #6 #8) #6 #8) #14 find-value-in-plist #8)(#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #4 (#3 () #7 #0 (0 . 0) #15 #2 symbol? #5 #9 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #3 "Not a name for a class" #15 #3 define-class #15 #2 create-syntax-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) #3 () #7 #0 (0 . 1) #15 #2 symbol? #5 #9 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #3 "Not a name for a super class" #15 #3 define-class #15 #2 create-syntax-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) #3 () #7 #3 () #7 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #3 "No such super class" #15 #3 define-class #15 #2 create-syntax-anomaly #5 #15 #2 meroon-error #6 #8) #15 #0 (0 . 1) #15 #2 symbol->class #5 #15 #4 (#3 () #7 #3 () #7 #2 gensym #5 #15 #4 (#3 () #7 #3 () #7 #1 (2 . 3) #15 #0 (2 . 2) #15 #0 (1 . 0) #15 #0 (2 . 0) #15 #2 add-subclass #5 #15 #4 (#3 () #7 #4 (#3 () #7 #1 (4 . 3) #15 #3 :prototype #15 #2 memq #5 #10 (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (4 . 0) #15 #2 cons #5 #15 #3 quote #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (4 . 0) #15 #2 cons #5 #15 #3 quote #15 #2 cons #5 #15 #2 cons #5 #15 #3 "Inappropriate :prototype !?" #15 #2 cons #5 #15 #3 'define-class #15 #2 cons #5 #15 #3 create-syntax-anomaly #15 #2 cons #5 #15 #2 cons #5 #15 #3 meroon-error #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (2 . 0) #15 #2 cons #5 #15 #3 cdr #15 #2 cons #5 #15 #2 cons #5 #15 #3 null? #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-fields #5 #15 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (3 . 0) #15 #2 cons #5 #15 #3 car #15 #2 cons #5 #15 #2 cons #5 #15 #3 object->class #15 #2 cons #5 #15 #2 cons #5 #15 #3 class-name #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class #5 #15 #2 class-name #5 #15 #2 cons #5 #15 #3 quote #15 #2 cons #5 #15 #2 cons #5 #15 #3 eq? #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (3 . 0) #15 #2 cons #5 #15 #3 car #15 #2 cons #5 #15 #2 cons #5 #15 #3 field-name #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (0 . 0) #15 #2 field-name #5 #15 #2 cons #5 #15 #3 quote #15 #2 cons #5 #15 #2 cons #5 #15 #3 eq? #15 #2 cons #5 #15 #2 cons #5 #15 #3 and #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (3 . 0) #15 #2 cons #5 #15 #3 cdr #15 #2 cons #5 #15 #2 cons #5 #15 #0 (3 . 0) #15 #2 cons #5 #15 #3 set! #15 #2 cons #5 #15 #2 cons #5 #15 #3 begin #15 #2 cons #6 #8) #15 #2 map #5 #15 #2 append #5 #15 #3 and #15 #2 cons #5 #15 #2 cons #5 #15 #3 unless #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (2 . 0) #15 #2 cons #5 #15 #3 class-fields #15 #2 cons #5 #15 #2 cons #5 #15 #0 (2 . 0) #15 #2 cons #5 #15 #3 cons #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (4 . 0) #15 #2 cons #5 #15 #3 quote #15 #2 cons #5 #15 #2 cons #5 #15 #3 symbol->class #15 #2 cons #5 #15 #2 cons #5 #15 #0 (2 . 0) #15 #2 cons #5 #15 #2 cons #5 #15 #2 cons #5 #15 #3 let #15 #2 cons #5 #15 #2 cons #5 #15 #0 (2 . 0) #15 #2 cons #5 #15 #2 cons #5 #15 #2 cons #5 #15 #3 let #15 #2 cons #6 #8) (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (4 . 0) #15 #2 cons #5 #15 #3 quote #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #0 (2 . 0) #15 #0 (4 . 0) #15 #0 (1 . 0) #15 #2 generate-related-names #5 #15 #2 cons #5 #15 #3 () #7 #1 (4 . 3) #15 #3 :eponymous #15 #2 memq #5 #9 (#3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #0 (2 . 0) #15 #2 cons #5 #15 #0 (4 . 0) #15 #2 cons #5 #15 #3 oo-set! #15 #2 cons #5 #15 #2 cons #6 #8) (#3 () #8) #15 #2 append #5 #15 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #1 (4 . 3) #15 #2 cons #5 #15 #3 quote #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #0 (4 . 2) #15 #2 cons #5 #15 #3 quote #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (4 . 1) #15 #2 cons #5 #15 #3 quote #15 #2 cons #5 #15 #2 cons #5 #15 #3 symbol->class #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #0 (4 . 0) #15 #2 cons #5 #15 #3 quote #15 #2 cons #5 #15 #2 cons #5 #15 #3 add-subclass #15 #2 cons #5 #15 #2 cons #5 #15 #0 (2 . 0) #15 #2 cons #5 #15 #2 cons #5 #15 #2 cons #5 #15 #3 let #15 #2 cons #6 #8) #8) #6 #8) #6 #8) #6 #8) #6 #8) #15 #2 apply #6 #8) #15 #3 %macro-special-form% #15 #3 define-class #15 #2 put #5 #3 define-class #8) #6 #8)(#4 (#3 () #7 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 class? #5 #9 (#3 () #7 #4 (#2 generate-class-related-names #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 field? #5 #10 (#3 () #7 #4 (#2 generate-field-related-names #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #0 (1 . 1) #15 #0 (1 . 0) #15 #3 "No method" #15 #3 generate-related-names #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) (#3 () #8) #8) #8) #6 #8) #14 generate-related-names #8)(#4 (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 class-fields #5 #15 #4 (#3 () #7 #3 () #7 #3 ((set! fields (cdr fields))) #15 #3 () #7 #3 (car fields) #15 #0 (1 . 1) #15 #0 (0 . 0) #15 #2 generate-related-names #5 #15 #2 cons #5 #15 #3 begin #15 #2 cons #6 #8) #15 #2 map #5 #15 #3 1951 #15 #2 cons #5 #15 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 2) #15 #2 cons #5 #15 #3 class-fields #15 #2 cons #5 #15 #2 cons #5 #15 #3 fields #15 #2 cons #5 #15 #2 cons #5 #15 #2 cons #5 #15 #3 let #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 2) #15 #2 cons #5 #15 #3 class-allocator #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #0 (0 . 1) #15 #3 allocate- #15 #2 oo-concat #5 #15 #2 cons #5 #15 #3 oo-set! #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 2) #15 #2 cons #5 #15 #3 class-maker #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #0 (0 . 1) #15 #3 make- #15 #2 oo-concat #5 #15 #2 cons #5 #15 #3 oo-set! #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 2) #15 #2 cons #5 #15 #3 class-predicate #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 "?" #15 #0 (0 . 1) #15 #2 oo-concat #5 #15 #2 cons #5 #15 #3 oo-set! #15 #2 cons #5 #15 #2 cons #5 #15 #3 begin #15 #2 cons #6 #8) #14 generate-class-related-names #8)(#4 (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 poly-field? #5 #9 (#3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 2) #15 #2 cons #5 #15 #3 poly-field-lengther #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 -length #15 #3 () #7 #0 (0 . 0) #15 #2 field-name #5 #15 #3 - #15 #0 (0 . 1) #15 #2 oo-concat #5 #15 #2 cons #5 #15 #3 oo-set! #15 #2 cons #5 #15 #2 cons #6 #8) (#3 () #8) #15 #3 () #7 #0 (0 . 0) #15 #2 mutable-mono-field? #5 #9 (#3 () #7 #4 (#3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (1 . 2) #15 #2 cons #5 #15 #3 mutable-mono-field-writer #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 "!" #15 #3 () #7 #0 (1 . 0) #15 #2 field-name #5 #15 #3 - #15 #0 (1 . 1) #15 #3 set- #15 #2 oo-concat #5 #15 #2 cons #5 #15 #3 oo-set! #15 #2 cons #5 #15 #2 cons #6 #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 mutable-poly-field? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (1 . 2) #15 #2 cons #5 #15 #3 mutable-poly-field-writer #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 "!" #15 #3 () #7 #0 (1 . 0) #15 #2 field-name #5 #15 #3 - #15 #0 (1 . 1) #15 #3 set- #15 #2 oo-concat #5 #15 #2 cons #5 #15 #3 oo-set! #15 #2 cons #5 #15 #2 cons #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #8) #6 #8) (#3 () #8) #8) #8) #15 #2 append #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 2) #15 #2 cons #5 #15 #3 field-reader #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 field-name #5 #15 #3 - #15 #0 (0 . 1) #15 #2 oo-concat #5 #15 #2 cons #5 #15 #3 oo-set! #15 #2 cons #5 #15 #2 cons #5 #15 #3 begin #15 #2 cons #6 #8) #14 generate-field-related-names #8)(#4 (#3 () #7 #3 () #7 #4 (#3 #f #8) #15 #0 (0 . 0) #15 #2 symbol->class #5 #15 #4 (#3 () #7 #0 (0 . 0) #9 (#3 () #7 #0 (0 . 0) #15 #2 class-number #6 #8) (#2 *class-number* #8) #15 #4 (#3 () #7 #0 (1 . 0) #15 #4 (#3 () #7 #3 () #7 #4 (#3 class #8) #15 #0 (3 . 3) #15 #3 :metaclass #15 #2 find-value-in-plist #5 #15 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 symbol->class #5 #15 #2 class-allocator #5 #15 #4 (#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #0 (7 . 3) #15 #3 :prototype #15 #2 memq #6 #8) #15 #0 (3 . 0) #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #5 #10 (#0 (5 . 0) #8) (#3 () #7 #3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (6 . 0) #15 #2 object->class #5 #15 #2 class-name #5 #15 #0 (3 . 0) #15 #2 eq? #6 #8) #15 #0 (5 . 0) #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #5 #9 (#3 () #7 #3 () #7 #0 (5 . 0) #15 #2 class-super #5 #15 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 class-subclasses #5 #15 #3 () #7 #0 (6 . 0) #15 #2 class-number #5 #15 #2 remove #5 #15 #0 (0 . 0) #15 #2 set-class-subclasses! #5 #3 () #7 #0 (7 . 1) #15 #0 (6 . 0) #15 #2 set-class-super! #5 #0 (6 . 0) #8) #6 #8) (#3 () #7 #0 (1 . 0) #6 #8) #15 #4 (#3 () #7 #0 (7 . 0) #15 #0 (0 . 0) #15 #2 set-class-name! #5 #3 () #7 #0 (5 . 0) #15 #0 (0 . 0) #15 #2 set-class-number! #5 #3 () #7 #0 (7 . 1) #15 #0 (0 . 0) #15 #2 set-class-super! #5 #3 () #7 #3 () #7 #2 list #5 #15 #0 (0 . 0) #15 #2 set-class-subclasses! #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #0 (2 . 0) #15 #0 (1 . 0) #15 #2 is-a? #6 #8) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #6 #8) #15 #0 (0 . 0) #15 #2 set-class-predicate! #5 #3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 class-number #5 #15 #2 *classes* #15 #2 vector-set! #5 #0 (4 . 0) #9 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #2 *class-number* #15 #3 1 #15 #2 + #5 #13 *class-number* #3 () #7 #3 () #7 #2 *classes* #15 #2 vector-length #5 #15 #2 *class-number* #15 #2 >= #5 #10 (#3 () #7 #4 (#3 () #7 #2 extend-classes-number! #6 #8) #6 #8) (#3 #f #8) #8) #6 #8) #3 () #7 #0 (7 . 3) #15 #0 (7 . 2) #15 #0 (0 . 0) #15 #2 parse-fields! #5 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 create-allocator #5 #15 #0 (0 . 0) #15 #2 set-class-allocator! #5 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 create-maker #5 #15 #0 (0 . 0) #15 #2 set-class-maker! #5 #3 () #7 #3 () #7 #3 () #7 #0 (7 . 1) #15 #2 class-subclasses #5 #15 #3 () #7 #0 (0 . 0) #15 #2 class-number #5 #15 #2 cons #5 #15 #0 (7 . 1) #15 #2 set-class-subclasses! #5 #3 () #7 #4 (#3 () #7 #0 (8 . 3) #15 #3 :prototype #15 #2 memq #6 #8) #15 #0 (4 . 0) #15 #4 (#0 (0 . 0) #10 (#0 (0 . 0) #8) (#3 () #7 #0 (0 . 1) #6 #8) #8) #5 #9 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 class-number #5 #15 #4 (#3 () #7 #2 *generics* #15 #4 (#0 (0 . 0) #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 1) #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #15 #0 (2 . 0) #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-set! #6 #8) #6 #8) (#3 #f #8) #8) #15 #2 vector-map #6 #8) #6 #8) #6 #8) #3 () #7 #0 (0 . 0) #15 #2 initialize! #6 #8) #6 #8) #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #14 class-add-subclass #8)(#2 class-add-subclass #14 add-subclass #8)(#4 (#4 (#3 () #7 #4 (#3 () #7 #0 (2 . 0) #15 #0 (1 . 0) #15 #2 is-a? #6 #8) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #6 #8) #8) #14 make-predicate #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 class-fields #5 #15 #4 (#3 () #7 #0 (0 . 0) #15 #2 mono-field? #15 #2 every? #5 #10 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 length #5 #15 #0 (1 . 0) #15 #2 make-simple-allocator #6 #8) (#3 () #7 #0 (1 . 0) #15 #2 make-complex-allocator #6 #8) #8) #6 #8) #14 create-allocator #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 class-number #5 #15 #4 (#4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #3 () #7 #0 (2 . 1) #15 #3 1 #15 #2 + #5 #15 #2 make-vector #5 #15 #4 (#3 () #7 #0 (0 . 0) #15 #2 class? #5 #10 (#0 (0 . 0) #8) (#3 () #7 #0 (0 . 0) #15 #2 initialize! #6 #8) #8) #6 #8) #8) #6 #8) #14 make-simple-allocator #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 class-fields #5 #15 #4 (#4 (#3 () #7 #1 (0 . 0) #15 #4 (#3 () #7 #4 (#3 () #7 #3 0 #15 #0 (1 . 0) #15 #2 >= #6 #8) #15 #3 () #7 #0 (0 . 0) #15 #2 number? #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #6 #8) #15 #2 every? #5 #9 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #1 (1 . 0) #15 #0 (3 . 0) #15 #3 "Sizes must be positive integers" #15 #3 meroon-allocator #15 #2 create-allocation-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) #3 () #7 #3 () #7 #3 1 #15 #1 (0 . 0) #15 #0 (1 . 0) #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 poly-field? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 1) #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #3 () #7 #0 (1 . 1) #15 #2 car #5 #15 #3 1 #15 #2 + #5 #15 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #0 (2 . 0) #6 #8) (#3 () #7 #3 () #7 #3 () #15 #0 (5 . 0) #15 #3 "Missing size" #15 #3 meroon-allocator #15 #2 create-allocation-anomaly #5 #15 #2 meroon-error #6 #8) #8) #6 #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 mono-field? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #3 1 #15 #2 + #5 #15 #0 (1 . 1) #15 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 () #8) #8) #8) (#3 () #7 #0 (0 . 2) #15 #2 make-vector #6 #8) #8) #11 (0 . 0) #8) #5 #5 #15 #4 (#3 () #7 #3 () #7 #0 (3 . 0) #15 #2 class-number #5 #15 #3 0 #15 #0 (0 . 0) #15 #2 vector-set! #5 #3 () #7 #3 1 #15 #1 (1 . 0) #15 #0 (2 . 0) #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 poly-field? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #2 car #5 #15 #0 (1 . 2) #15 #0 (3 . 0) #15 #2 vector-set! #5 #3 () #7 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 car #5 #15 #0 (1 . 2) #15 #3 1 #15 #2 + #5 #15 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 mono-field? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #3 1 #15 #2 + #5 #15 #0 (1 . 1) #15 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 () #8) #8) #8) (#3 () #7 #0 (2 . 0) #15 #2 class? #5 #10 (#0 (2 . 0) #8) (#3 () #7 #0 (2 . 0) #15 #2 initialize! #6 #8) #8) #8) #11 (0 . 0) #8) #5 #6 #8) #6 #8) #8) #6 #8) #14 make-complex-allocator #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 class-fields #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 mono-field? #15 #2 every? #5 #10 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 length #5 #15 #0 (2 . 0) #15 #2 make-simple-maker #6 #8) (#3 () #7 #0 (2 . 0) #15 #2 make-complex-maker #6 #8) #8) #6 #8) #6 #8) #14 create-maker #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 class-number #5 #15 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-fields #5 #15 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 length #5 #15 #4 (#3 () #7 #4 (#4 (#3 () #7 #3 () #7 #1 (0 . 0) #15 #2 length #5 #15 #0 (2 . 0) #15 #2 = #5 #10 (#3 () #7 #1 (0 . 0) #15 #0 (4 . 0) #15 #2 vector #15 #2 oo-apply #6 #8) (#3 () #7 #3 () #7 #1 (0 . 0) #15 #0 (5 . 0) #15 #3 "Incorrect number of arguments" #15 #3 meroon-maker #15 #2 create-allocation-anomaly #5 #15 #2 meroon-error #6 #8) #8) #8) #6 #8) #6 #8) #6 #8) #6 #8) #14 make-simple-maker #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 class-number #5 #15 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-fields #5 #15 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 length #5 #15 #4 (#3 () #7 #4 (#4 (#3 () #7 #1 (0 . 0) #15 #0 (3 . 0) #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 poly-field? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 1) #15 #2 pair? #5 #10 (#3 () #7 #4 (#3 () #7 #3 0 #15 #3 () #7 #0 (2 . 1) #15 #2 car #5 #15 #2 >= #6 #8) #15 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 car #5 #15 #2 integer? #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #5 #10 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #2 car #5 #15 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #3 0 #15 #0 (0 . 1) #15 #2 > #5 #10 (#3 () #7 #0 (0 . 0) #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #3 1 #15 #0 (0 . 1) #15 #2 - #5 #15 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #0 (1 . 0) #6 #8) (#3 () #7 #3 () #7 #3 () #15 #0 (10 . 0) #15 #3 "Not enough arguments" #15 #3 meroon-maker #15 #2 create-allocation-anomaly #5 #15 #2 meroon-error #6 #8) #8) (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (3 . 0) #15 #2 cdr #5 #15 #0 (4 . 0) #6 #8) #8) #11 (0 . 0) #8) #5 #6 #8) (#3 () #7 #3 () #7 #0 (1 . 1) #15 #0 (8 . 0) #15 #3 "Incorrect size" #15 #3 meroon-maker #15 #2 create-allocation-anomaly #5 #15 #2 meroon-error #6 #8) #8) (#3 () #7 #3 () #7 #0 (1 . 1) #15 #0 (8 . 0) #15 #3 "Missing size" #15 #3 meroon-maker #15 #2 create-allocation-anomaly #5 #15 #2 meroon-error #6 #8) #8) #6 #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 mono-field? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 1) #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #0 (2 . 0) #6 #8) (#3 () #7 #3 () #7 #0 (1 . 1) #15 #0 (8 . 0) #15 #3 "Not enough field" #15 #3 meroon-maker #15 #2 create-allocation-anomaly #5 #15 #2 meroon-error #6 #8) #8) #6 #8) (#3 () #8) #8) #8) (#3 () #7 #0 (0 . 1) #15 #2 null? #5 #10 (#3 () #7 #1 (2 . 0) #15 #0 (6 . 0) #15 #2 vector #15 #2 oo-apply #6 #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #0 (7 . 0) #15 #3 "Too much arguments" #15 #3 meroon-maker #15 #2 create-allocation-anomaly #5 #15 #2 meroon-error #6 #8) #8) #8) #11 (0 . 0) #8) #5 #6 #8) #8) #6 #8) #6 #8) #6 #8) #6 #8) #14 make-complex-maker #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 class-number #5 #15 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 class-super #5 #15 #2 class-fields #5 #15 #4 (#3 () #7 #0 (0 . 0) #15 #0 (1 . 1) #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 1) #15 #2 symbol? #5 #9 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #0 (6 . 0) #15 #3 "Not a field name" #15 #3 define-class #15 #2 create-syntax-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) #3 () #7 #4 (#3 #f #8) #15 #2 field-name #15 #0 (2 . 1) #15 #0 (0 . 1) #15 #2 sequence-find #5 #9 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #0 (6 . 0) #15 #3 "Field redefinition" #15 #3 define-class #15 #2 create-syntax-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) (#3 #f #8) #3 () #7 #0 (0 . 2) #15 #0 (2 . 1) #15 #3 () #7 #0 (0 . 0) #15 #4 (#3 () #7 #3 (mono) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#3 () #7 #0 (2 . 2) #15 #3 :immutable #15 #2 memq #5 #10 (#3 () #7 #3 wait #15 #0 (6 . 1) #15 #0 (2 . 1) #15 #2 make-mono-field #6 #8) (#3 () #7 #3 wait #15 #3 wait #15 #0 (6 . 1) #15 #0 (2 . 1) #15 #2 make-mutable-mono-field #6 #8) #8) #6 #8) (#3 () #7 #3 (poly) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#3 () #7 #0 (2 . 2) #15 #3 :immutable #15 #2 memq #5 #10 (#3 () #7 #3 wait #15 #3 wait #15 #0 (6 . 1) #15 #0 (2 . 1) #15 #2 make-poly-field #6 #8) (#3 () #7 #3 wait #15 #3 wait #15 #3 wait #15 #0 (6 . 1) #15 #0 (2 . 1) #15 #2 make-mutable-poly-field #6 #8) #8) #6 #8) (#3 () #8) #8) #8) #5 #15 #2 create-accessors! #6 #8) #11 (0 . 0) #3 () #7 #0 (1 . 0) #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 car #5 #15 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 symbol? #5 #9 (#3 () #7 #4 (#3 () #7 #0 (6 . 2) #15 #0 (1 . 0) #15 #3 mono #15 #0 (2 . 0) #6 #8) #6 #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #2 pair? #6 #8) #15 #3 () #7 #0 (0 . 0) #15 #2 pair? #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 car #5 #15 #4 (#3 () #7 #3 (= mono) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (8 . 2) #15 #3 () #7 #0 (3 . 0) #15 #2 cddr #5 #15 #2 append #5 #15 #3 () #7 #0 (3 . 0) #15 #2 cadr #5 #15 #3 mono #15 #0 (4 . 0) #6 #8) #6 #8) (#3 () #7 #3 (* poly) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (8 . 2) #15 #3 () #7 #0 (3 . 0) #15 #2 cddr #5 #15 #2 append #5 #15 #3 () #7 #0 (3 . 0) #15 #2 cadr #5 #15 #3 poly #15 #0 (4 . 0) #6 #8) #6 #8) (#3 #t #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (3 . 0) #15 #0 (8 . 0) #15 #3 "Invalid field descriptor" #15 #3 define-class #15 #2 create-syntax-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #0 (6 . 0) #15 #3 "Invalid field description" #15 #3 define-class #15 #2 create-syntax-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) (#3 () #8) #8) #8) #15 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 list #5 #15 #0 (4 . 1) #15 #2 append #5 #15 #3 () #7 #0 (4 . 0) #15 #2 cdr #5 #15 #0 (5 . 0) #6 #8) #6 #8) #6 #8) #6 #8) (#3 () #7 #4 (#3 () #7 #0 (2 . 1) #15 #0 (5 . 0) #15 #2 set-class-fields! #5 #0 (2 . 1) #8) #6 #8) #8) #6 #8) #11 (0 . 0) #8) #5 #6 #8) #6 #8) #14 parse-fields! #8)(#4 (#3 () #7 #0 (0 . 0) #15 #2 poly-field? #5 #9 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #0 (1 . 1) #15 #0 (1 . 0) #15 #2 create-poly-lengther #5 #15 #0 (1 . 0) #15 #2 set-poly-field-lengther! #6 #8) #6 #8) (#3 () #8) #3 () #7 #0 (0 . 0) #15 #2 mutable-mono-field? #5 #9 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #0 (1 . 1) #15 #0 (1 . 0) #15 #2 create-mono-writer #5 #15 #0 (1 . 0) #15 #2 set-mutable-mono-field-writer! #6 #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 mutable-poly-field? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #0 (1 . 1) #15 #0 (1 . 0) #15 #2 create-poly-writer #5 #15 #0 (1 . 0) #15 #2 set-mutable-poly-field-writer! #6 #8) #6 #8) (#3 () #8) #8) #3 () #7 #0 (0 . 0) #15 #2 mono-field? #5 #9 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #0 (1 . 1) #15 #0 (1 . 0) #15 #2 create-mono-reader #5 #15 #0 (1 . 0) #15 #2 set-field-reader! #6 #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 poly-field? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #0 (1 . 1) #15 #0 (1 . 0) #15 #2 create-poly-reader #5 #15 #0 (1 . 0) #15 #2 set-field-reader! #6 #8) #6 #8) (#3 () #8) #8) #0 (0 . 0) #8) #14 create-accessors! #8)(#4 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 field-class #5 #15 #2 number->class #5 #15 #4 (#3 () #7 #3 () #15 #0 (1 . 1) #15 #3 1 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 1) #15 #2 null? #5 #10 (#3 () #7 #0 (0 . 2) #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #0 (3 . 0) #15 #0 (4 . 0) #15 #3 () #7 #0 (4 . 2) #15 #3 :careless #15 #2 memq #5 #9 (#3 careless #8) (#3 careful #8) #15 #2 make-direct-reader #6 #8) #6 #8) (#3 () #7 #3 () #7 #0 (0 . 2) #15 #2 cdr #5 #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #2 car #5 #15 #0 (1 . 0) #15 #0 (3 . 0) #15 #0 (4 . 0) #15 #3 () #7 #0 (4 . 2) #15 #3 :careless #15 #2 memq #5 #9 (#3 careless #8) (#3 careful #8) #15 #2 make-post-indexed-reader #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #2 reverse #5 #15 #0 (1 . 0) #15 #0 (3 . 0) #15 #0 (4 . 0) #15 #3 () #7 #0 (4 . 2) #15 #3 :careless #15 #2 memq #5 #9 (#3 careless #8) (#3 careful #8) #15 #2 make-complex-reader #6 #8) #6 #8) (#3 () #8) #8) #8) #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #2 poly-field? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #0 (1 . 0) #15 #2 cons #5 #15 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 1 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #2 mono-field? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 2) #15 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 () #7 #0 (1 . 0) #15 #3 1 #15 #2 + #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #11 (0 . 0) #8) #5 #6 #8) #6 #8) #14 create-mono-reader #8)(#4 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 field-class #5 #15 #2 number->class #5 #15 #4 (#3 () #7 #3 () #15 #0 (1 . 1) #15 #3 1 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 1) #15 #2 null? #5 #10 (#3 () #7 #0 (0 . 2) #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #0 (3 . 0) #15 #0 (4 . 0) #15 #3 () #7 #0 (4 . 2) #15 #3 :careless #15 #2 memq #5 #9 (#3 careless #8) (#3 careful #8) #15 #2 make-direct-writer #6 #8) #6 #8) (#3 () #7 #3 () #7 #0 (0 . 2) #15 #2 cdr #5 #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #2 car #5 #15 #0 (1 . 0) #15 #0 (3 . 0) #15 #0 (4 . 0) #15 #3 () #7 #0 (4 . 2) #15 #3 :careless #15 #2 memq #5 #9 (#3 careless #8) (#3 careful #8) #15 #2 make-post-indexed-writer #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #2 reverse #5 #15 #0 (1 . 0) #15 #0 (3 . 0) #15 #0 (4 . 0) #15 #3 () #7 #0 (4 . 2) #15 #3 :careless #15 #2 memq #5 #9 (#3 careless #8) (#3 careful #8) #15 #2 make-complex-writer #6 #8) #6 #8) (#3 () #8) #8) #8) #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #2 poly-field? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #0 (1 . 0) #15 #2 cons #5 #15 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 1 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #2 mono-field? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 2) #15 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 () #7 #0 (1 . 0) #15 #3 1 #15 #2 + #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #11 (0 . 0) #8) #5 #6 #8) #6 #8) #14 create-mono-writer #8)(#4 (#3 () #7 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 create-mono-reader #6 #8) #14 create-poly-lengther #8)(#4 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 field-class #5 #15 #2 number->class #5 #15 #4 (#3 () #7 #3 () #15 #0 (1 . 1) #15 #3 1 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 1) #15 #2 null? #5 #10 (#3 () #7 #0 (0 . 2) #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #0 (3 . 0) #15 #0 (4 . 0) #15 #3 () #7 #0 (4 . 2) #15 #3 :careless #15 #2 memq #5 #9 (#3 careless #8) (#3 careful #8) #15 #2 make-indexed-direct-reader #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #2 reverse #5 #15 #0 (1 . 0) #15 #0 (3 . 0) #15 #0 (4 . 0) #15 #3 () #7 #0 (4 . 2) #15 #3 :careless #15 #2 memq #5 #9 (#3 careless #8) (#3 careful #8) #15 #2 make-indexed-complex-reader #6 #8) #6 #8) (#3 () #8) #8) #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #2 poly-field? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #0 (1 . 0) #15 #2 cons #5 #15 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 1 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #2 mono-field? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 2) #15 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 () #7 #0 (1 . 0) #15 #3 1 #15 #2 + #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #11 (0 . 0) #8) #5 #6 #8) #6 #8) #14 create-poly-reader #8)(#4 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 field-class #5 #15 #2 number->class #5 #15 #4 (#3 () #7 #3 () #15 #0 (1 . 1) #15 #3 1 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 1) #15 #2 null? #5 #10 (#3 () #7 #0 (0 . 2) #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #0 (3 . 0) #15 #0 (4 . 0) #15 #3 () #7 #0 (4 . 2) #15 #3 :careless #15 #2 memq #5 #9 (#3 careless #8) (#3 careful #8) #15 #2 make-indexed-direct-writer #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #2 reverse #5 #15 #0 (1 . 0) #15 #0 (3 . 0) #15 #0 (4 . 0) #15 #3 () #7 #0 (4 . 2) #15 #3 :careless #15 #2 memq #5 #9 (#3 careless #8) (#3 careful #8) #15 #2 make-indexed-complex-writer #6 #8) #6 #8) (#3 () #8) #8) #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #2 poly-field? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #0 (1 . 0) #15 #2 cons #5 #15 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 1 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #2 mono-field? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 2) #15 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 () #7 #0 (1 . 0) #15 #3 1 #15 #2 + #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #11 (0 . 0) #8) #5 #6 #8) #6 #8) #14 create-poly-writer #8)(#4 (#3 () #7 #0 (0 . 0) #15 #4 (#3 () #7 #3 (careful) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#4 (#3 () #7 #0 (3 . 2) #15 #0 (0 . 0) #15 #2 is-a? #5 #10 (#3 () #7 #0 (3 . 3) #15 #0 (0 . 0) #15 #2 vector-ref #6 #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #0 (3 . 2) #15 #3 "Wrong class" #15 #0 (3 . 1) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #8) #8) #6 #8) (#3 () #7 #3 (careless) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#4 (#3 () #7 #0 (3 . 3) #15 #0 (0 . 0) #15 #2 vector-ref #6 #8) #8) #6 #8) (#3 () #8) #8) #8) #6 #8) #14 make-direct-reader #8)(#4 (#3 () #7 #0 (0 . 0) #15 #4 (#3 () #7 #3 (careful) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#4 (#3 () #7 #0 (3 . 2) #15 #0 (0 . 0) #15 #2 is-a? #5 #10 (#3 () #7 #0 (0 . 1) #15 #0 (3 . 3) #15 #0 (0 . 0) #15 #2 vector-set! #6 #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #0 (3 . 2) #15 #3 "Wrong class" #15 #0 (3 . 1) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #8) #8) #6 #8) (#3 () #7 #3 (careless) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#4 (#3 () #7 #0 (0 . 1) #15 #0 (3 . 3) #15 #0 (0 . 0) #15 #2 vector-set! #6 #8) #8) #6 #8) (#3 () #8) #8) #8) #6 #8) #14 make-direct-writer #8)(#4 (#3 () #7 #0 (0 . 0) #15 #4 (#3 () #7 #3 (careful) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#4 (#3 () #7 #0 (3 . 2) #15 #0 (0 . 0) #15 #2 is-a? #5 #10 (#3 () #7 #3 () #7 #0 (3 . 3) #15 #3 () #7 #0 (3 . 4) #15 #0 (0 . 0) #15 #2 vector-ref #5 #15 #0 (3 . 4) #15 #2 + #5 #15 #0 (0 . 0) #15 #2 vector-ref #6 #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #0 (3 . 2) #15 #3 "Wrong class" #15 #0 (3 . 1) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #8) #8) #6 #8) (#3 () #7 #3 (careless) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#4 (#3 () #7 #3 () #7 #0 (3 . 3) #15 #3 () #7 #0 (3 . 4) #15 #0 (0 . 0) #15 #2 vector-ref #5 #15 #0 (3 . 4) #15 #2 + #5 #15 #0 (0 . 0) #15 #2 vector-ref #6 #8) #8) #6 #8) (#3 () #8) #8) #8) #6 #8) #14 make-post-indexed-reader #8)(#4 (#3 () #7 #0 (0 . 0) #15 #4 (#3 () #7 #3 (careful) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#4 (#3 () #7 #0 (3 . 2) #15 #0 (0 . 0) #15 #2 is-a? #5 #10 (#3 () #7 #0 (0 . 1) #15 #3 () #7 #0 (3 . 3) #15 #3 () #7 #0 (3 . 4) #15 #0 (0 . 0) #15 #2 vector-ref #5 #15 #0 (3 . 4) #15 #2 + #5 #15 #0 (0 . 0) #15 #2 vector-set! #6 #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #0 (3 . 2) #15 #3 "Wrong class" #15 #0 (3 . 1) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #8) #8) #6 #8) (#3 () #7 #3 (careless) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#4 (#3 () #7 #0 (0 . 1) #15 #3 () #7 #0 (3 . 3) #15 #3 () #7 #0 (3 . 4) #15 #0 (0 . 0) #15 #2 vector-ref #5 #15 #0 (3 . 4) #15 #2 + #5 #15 #0 (0 . 0) #15 #2 vector-set! #6 #8) #8) #6 #8) (#3 () #8) #8) #8) #6 #8) #14 make-post-indexed-writer #8)(#4 (#4 (#3 () #7 #3 careful #15 #0 (1 . 0) #15 #2 eq? #5 #9 (#3 () #7 #4 (#3 () #7 #0 (2 . 2) #15 #0 (1 . 0) #15 #2 is-a? #5 #10 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #0 (3 . 2) #15 #3 "Wrong class" #15 #0 (3 . 1) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) #8) #6 #8) (#3 #f #8) #3 () #7 #3 () #7 #0 (1 . 4) #15 #0 (1 . 3) #15 #0 (0 . 0) #15 #2 compute-offset #5 #15 #0 (0 . 0) #15 #2 vector-ref #6 #8) #8) #14 make-complex-reader #8)(#4 (#4 (#3 () #7 #3 careful #15 #0 (1 . 0) #15 #2 eq? #5 #9 (#3 () #7 #4 (#3 () #7 #0 (2 . 2) #15 #0 (1 . 0) #15 #2 is-a? #5 #10 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 1) #15 #0 (2 . 0) #15 #0 (3 . 2) #15 #3 "Wrong class" #15 #0 (3 . 1) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) #8) #6 #8) (#3 #f #8) #3 () #7 #0 (0 . 1) #15 #3 () #7 #0 (1 . 4) #15 #0 (1 . 3) #15 #0 (0 . 0) #15 #2 compute-offset #5 #15 #0 (0 . 0) #15 #2 vector-set! #6 #8) #8) #14 make-complex-writer #8)(#4 (#3 () #7 #3 0 #15 #0 (0 . 2) #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #0 (0 . 1) #15 #2 + #5 #15 #0 (2 . 0) #15 #2 vector-ref #5 #15 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #0 (0 . 1) #15 #2 + #5 #15 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #0 (1 . 0) #6 #8) (#3 () #7 #0 (2 . 1) #15 #0 (0 . 1) #15 #2 + #6 #8) #8) #11 (0 . 0) #8) #5 #6 #8) #14 compute-offset #8)(#4 (#3 () #7 #0 (0 . 0) #15 #4 (#3 () #7 #3 (careful) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#4 (#3 () #7 #0 (3 . 2) #15 #0 (0 . 0) #15 #2 is-a? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (4 . 3) #15 #0 (1 . 0) #15 #2 vector-ref #5 #15 #0 (1 . 1) #15 #2 < #6 #8) #15 #3 () #7 #3 0 #15 #0 (0 . 1) #15 #2 >= #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #5 #10 (#3 () #7 #3 () #7 #0 (3 . 3) #15 #3 1 #15 #0 (0 . 1) #15 #2 + #5 #15 #0 (0 . 0) #15 #2 vector-ref #6 #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #0 (3 . 2) #15 #3 "Index out of bounds" #15 #0 (3 . 1) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #0 (3 . 2) #15 #3 "Wrong class" #15 #0 (3 . 1) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #8) #8) #6 #8) (#3 () #7 #3 (careless) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#4 (#3 () #7 #3 () #7 #0 (3 . 3) #15 #3 1 #15 #0 (0 . 1) #15 #2 + #5 #15 #0 (0 . 0) #15 #2 vector-ref #6 #8) #8) #6 #8) (#3 () #8) #8) #8) #6 #8) #14 make-indexed-direct-reader #8)(#4 (#3 () #7 #0 (0 . 0) #15 #4 (#3 () #7 #3 (careful) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#4 (#3 () #7 #0 (3 . 2) #15 #0 (0 . 0) #15 #2 is-a? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (4 . 3) #15 #0 (1 . 0) #15 #2 vector-ref #5 #15 #0 (1 . 1) #15 #2 < #6 #8) #15 #3 () #7 #3 0 #15 #0 (0 . 1) #15 #2 >= #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #5 #10 (#3 () #7 #0 (0 . 2) #15 #3 () #7 #0 (3 . 3) #15 #3 1 #15 #0 (0 . 1) #15 #2 + #5 #15 #0 (0 . 0) #15 #2 vector-set! #6 #8) (#3 () #7 #3 () #7 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #0 (3 . 2) #15 #3 "Index out of bounds" #15 #0 (3 . 1) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #8) (#3 () #7 #3 () #7 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #0 (3 . 2) #15 #3 "Wrong class" #15 #0 (3 . 1) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #8) #8) #6 #8) (#3 () #7 #3 (careless) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#4 (#3 () #7 #0 (0 . 2) #15 #3 () #7 #0 (3 . 3) #15 #3 1 #15 #0 (0 . 1) #15 #2 + #5 #15 #0 (0 . 0) #15 #2 vector-set! #6 #8) #8) #6 #8) (#3 () #8) #8) #8) #6 #8) #14 make-indexed-direct-writer #8)(#4 (#4 (#3 () #7 #3 careful #15 #0 (1 . 0) #15 #2 eq? #5 #9 (#3 () #7 #4 (#3 () #7 #0 (2 . 2) #15 #0 (1 . 0) #15 #2 is-a? #5 #10 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #0 (3 . 2) #15 #3 "Wrong class" #15 #0 (3 . 1) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) #8) #6 #8) (#3 #f #8) #3 () #7 #3 () #7 #0 (1 . 4) #15 #0 (1 . 3) #15 #0 (0 . 0) #15 #2 compute-offset #5 #15 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #0 (2 . 0) #15 #2 vector-ref #5 #15 #0 (2 . 1) #15 #2 < #6 #8) #15 #3 () #7 #3 0 #15 #0 (1 . 1) #15 #2 >= #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #5 #10 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #3 1 #15 #0 (1 . 1) #15 #2 + #5 #15 #0 (1 . 0) #15 #2 vector-ref #6 #8) (#3 () #7 #3 () #7 #0 (1 . 1) #15 #0 (1 . 0) #15 #0 (2 . 2) #15 #3 "Index out of bounds" #15 #0 (2 . 1) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #8) #6 #8) #8) #14 make-indexed-complex-reader #8)(#4 (#4 (#3 () #7 #3 careful #15 #0 (1 . 0) #15 #2 eq? #5 #9 (#3 () #7 #4 (#3 () #7 #0 (2 . 2) #15 #0 (1 . 0) #15 #2 is-a? #5 #10 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 2) #15 #0 (2 . 1) #15 #0 (2 . 0) #15 #0 (3 . 2) #15 #3 "Wrong class" #15 #0 (3 . 1) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) #8) #6 #8) (#3 #f #8) #3 () #7 #3 () #7 #0 (1 . 4) #15 #0 (1 . 3) #15 #0 (0 . 0) #15 #2 compute-offset #5 #15 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #0 (2 . 0) #15 #2 vector-ref #5 #15 #0 (2 . 1) #15 #2 < #6 #8) #15 #3 () #7 #3 0 #15 #0 (1 . 1) #15 #2 >= #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #5 #10 (#3 () #7 #0 (1 . 2) #15 #3 () #7 #0 (0 . 0) #15 #3 1 #15 #0 (1 . 1) #15 #2 + #5 #15 #0 (1 . 0) #15 #2 vector-set! #6 #8) (#3 () #7 #3 () #7 #0 (1 . 2) #15 #0 (1 . 1) #15 #0 (1 . 0) #15 #0 (2 . 2) #15 #3 "Index out of bounds" #15 #0 (2 . 1) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #8) #6 #8) #8) #14 make-indexed-complex-writer #8)(#3 () #7 #3 1 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 class-name #8)(#2 class-name #14 meroon+class-name #8)(#3 () #7 #3 1 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-class-name! #8)(#3 () #7 #3 2 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 class-number #8)(#2 class-number #14 meroon+class-number #8)(#3 () #7 #3 2 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-class-number! #8)(#3 () #7 #3 3 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 class-fields #8)(#3 () #7 #3 3 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-class-fields! #8)(#3 () #7 #3 4 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 class-super #8)(#2 class-super #14 meroon+class-super #8)(#3 () #7 #3 4 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-class-super! #8)(#3 () #7 #3 5 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 class-subclasses #8)(#3 () #7 #3 5 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-class-subclasses! #8)(#3 () #7 #3 6 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 class-predicate #8)(#3 () #7 #3 6 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-class-predicate! #8)(#3 () #7 #3 7 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 class-allocator #8)(#3 () #7 #3 7 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-class-allocator! #8)(#3 () #7 #3 8 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 class-maker #8)(#3 () #7 #3 8 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-class-maker! #8)(#3 () #7 #3 1 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 field-name #8)(#3 () #7 #3 2 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 field-class #8)(#3 () #7 #3 2 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-field-class! #8)(#3 () #7 #3 3 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 field-reader #8)(#3 () #7 #3 3 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-field-reader! #8)(#3 () #7 #3 4 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 poly-field-lengther #8)(#3 () #7 #3 4 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-poly-field-lengther! #8)(#3 () #7 #3 4 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 mutable-mono-field-writer #8)(#3 () #7 #3 4 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-mutable-mono-field-writer! #8)(#3 () #7 #3 5 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 mutable-poly-field-writer #8)(#3 () #7 #3 5 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-mutable-poly-field-writer! #8)(#3 () #7 #3 1 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 generic-name #8)(#2 generic-name #14 meroon+generic-name #8)(#3 () #7 #3 1 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-generic-name! #8)(#3 () #7 #3 2 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 generic-discriminator #8)(#3 () #7 #3 2 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-generic-discriminator! #8)(#3 () #7 #3 3 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 generic-dispatch-table #8)(#3 () #7 #3 3 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-generic-dispatch-table! #8)(#3 () #7 #3 4 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 generic-default #8)(#3 () #7 #3 4 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-generic-default! #8)(#3 () #7 #3 5 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-reader #5 #14 generic-variables #8)(#3 () #7 #3 5 #15 #3 -c- #15 #3 -f- #15 #3 careless #15 #2 make-direct-writer #5 #14 set-generic-variables! #8)(#3 wait #14 allocate-generic #8)(#3 wait #14 make-mono-field #8)(#3 wait #14 make-poly-field #8)(#3 wait #14 make-mutable-mono-field #8)(#3 wait #14 make-mutable-poly-field #8)(#3 wait #14 class? #8)(#3 wait #14 field? #8)(#3 wait #14 mutable-mono-field? #8)(#3 wait #14 mono-field? #8)(#3 wait #14 mutable-poly-field? #8)(#3 wait #14 poly-field? #8)(#3 () #7 #4 (#3 () #7 #3 wait #15 #3 wait #15 #3 wait #15 #0 (0 . 0) #15 #3 6 #15 #2 vector #6 #8) #15 #4 (#3 () #7 #3 () #7 #3 wait #15 #3 wait #15 #3 wait #15 #3 () #7 #3 3 #15 #3 2 #15 #3 1 #15 #2 list #5 #15 #3 #f #15 #3 () #7 #2 list #5 #15 #3 0 #15 #3 object #15 #3 1 #15 #2 vector #5 #15 #4 (#3 () #7 #3 () #7 #3 wait #15 #3 wait #15 #3 wait #15 #3 () #7 #2 list #5 #15 #0 (0 . 0) #15 #3 () #7 #3 (name number fields super subclasses predicate allocator maker) #15 #0 (1 . 0) #15 #2 map #5 #15 #3 1 #15 #3 class #15 #3 1 #15 #2 vector #5 #15 #4 (#3 () #7 #3 () #7 #3 wait #15 #3 wait #15 #3 wait #15 #3 () #7 #2 list #5 #15 #0 (1 . 0) #15 #3 () #7 #3 (name discriminator dispatch-table default variables) #15 #0 (2 . 0) #15 #2 map #5 #15 #3 2 #15 #3 generic #15 #3 1 #15 #2 vector #5 #15 #4 (#3 () #7 #3 () #7 #3 wait #15 #3 wait #15 #3 wait #15 #3 () #7 #3 5 #15 #3 4 #15 #2 list #5 #15 #0 (2 . 0) #15 #3 () #7 #3 (name class reader) #15 #0 (3 . 0) #15 #2 map #5 #15 #3 3 #15 #3 field #15 #3 1 #15 #2 vector #5 #15 #4 (#3 () #7 #3 () #7 #3 wait #15 #3 wait #15 #3 wait #15 #3 () #7 #3 6 #15 #2 list #5 #15 #0 (0 . 0) #15 #3 () #7 #3 (name class reader) #15 #0 (4 . 0) #15 #2 map #5 #15 #3 4 #15 #3 mono-field #15 #3 1 #15 #2 vector #5 #15 #4 (#3 () #7 #3 () #7 #3 wait #15 #3 wait #15 #3 wait #15 #3 () #7 #3 7 #15 #2 list #5 #15 #0 (1 . 0) #15 #3 () #7 #3 (name class reader lengther) #15 #0 (5 . 0) #15 #2 map #5 #15 #3 5 #15 #3 poly-field #15 #3 1 #15 #2 vector #5 #15 #4 (#3 () #7 #3 () #7 #3 wait #15 #3 wait #15 #3 wait #15 #3 () #7 #2 list #5 #15 #0 (1 . 0) #15 #3 () #7 #3 (name class reader writer) #15 #0 (6 . 0) #15 #2 map #5 #15 #3 6 #15 #3 mutable-mono-field #15 #3 1 #15 #2 vector #5 #15 #4 (#3 () #7 #3 () #7 #3 wait #15 #3 wait #15 #3 wait #15 #3 () #7 #2 list #5 #15 #0 (1 . 0) #15 #3 () #7 #3 (name class reader lengther writer) #15 #0 (7 . 0) #15 #2 map #5 #15 #3 7 #15 #3 mutable-poly-field #15 #3 1 #15 #2 vector #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (8 . 0) #15 #3 0 #15 #2 *classes* #15 #2 vector-set! #5 #3 () #7 #0 (7 . 0) #15 #3 1 #15 #2 *classes* #15 #2 vector-set! #5 #3 () #7 #0 (6 . 0) #15 #3 2 #15 #2 *classes* #15 #2 vector-set! #5 #3 () #7 #0 (5 . 0) #15 #3 3 #15 #2 *classes* #15 #2 vector-set! #5 #3 () #7 #0 (4 . 0) #15 #3 4 #15 #2 *classes* #15 #2 vector-set! #5 #3 () #7 #0 (3 . 0) #15 #3 5 #15 #2 *classes* #15 #2 vector-set! #5 #3 () #7 #0 (2 . 0) #15 #3 6 #15 #2 *classes* #15 #2 vector-set! #5 #3 () #7 #0 (1 . 0) #15 #3 7 #15 #2 *classes* #15 #2 vector-set! #5 #3 8 #13 *class-number* #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #0 (7 . 0) #15 #2 class-fields #5 #15 #2 length #5 #15 #3 1 #15 #2 + #5 #15 #2 make-vector #5 #15 #4 (#3 () #7 #3 () #7 #0 (8 . 0) #15 #2 class-number #5 #15 #3 0 #15 #0 (0 . 0) #15 #2 vector-set! #5 #0 (0 . 0) #8) #6 #8) #13 allocate-generic #4 (#3 () #7 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (5 . 0) #15 #2 class-number #5 #15 #2 vector #6 #8) #14 make-mono-field #4 (#3 () #7 #0 (0 . 3) #15 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (4 . 0) #15 #2 class-number #5 #15 #2 vector #6 #8) #14 make-poly-field #4 (#3 () #7 #0 (0 . 3) #15 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (3 . 0) #15 #2 class-number #5 #15 #2 vector #6 #8) #14 make-mutable-mono-field #4 (#3 () #7 #0 (0 . 4) #15 #0 (0 . 3) #15 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (2 . 0) #15 #2 class-number #5 #15 #2 vector #6 #8) #14 make-mutable-poly-field #3 () #7 #3 () #7 #0 (7 . 0) #15 #2 make-predicate #5 #15 #0 (7 . 0) #15 #2 set-class-predicate! #5 #3 () #7 #3 () #7 #0 (6 . 0) #15 #2 make-predicate #5 #15 #0 (6 . 0) #15 #2 set-class-predicate! #5 #3 () #7 #3 () #7 #0 (5 . 0) #15 #2 make-predicate #5 #15 #0 (5 . 0) #15 #2 set-class-predicate! #5 #3 () #7 #3 () #7 #0 (4 . 0) #15 #2 make-predicate #5 #15 #0 (4 . 0) #15 #2 set-class-predicate! #5 #3 () #7 #3 () #7 #0 (3 . 0) #15 #2 make-predicate #5 #15 #0 (3 . 0) #15 #2 set-class-predicate! #5 #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 make-predicate #5 #15 #0 (2 . 0) #15 #2 set-class-predicate! #5 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 make-predicate #5 #15 #0 (1 . 0) #15 #2 set-class-predicate! #5 #3 () #7 #0 (7 . 0) #15 #2 class-predicate #5 #14 class? #3 () #7 #0 (5 . 0) #15 #2 class-predicate #5 #14 field? #3 () #7 #0 (4 . 0) #15 #2 class-predicate #5 #14 mono-field? #3 () #7 #0 (2 . 0) #15 #2 class-predicate #5 #14 mutable-mono-field? #3 () #7 #0 (3 . 0) #15 #2 class-predicate #5 #14 poly-field? #3 () #7 #0 (1 . 0) #15 #2 class-predicate #5 #14 mutable-poly-field? #3 genesis #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class #5 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 meroon+class-super #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #0 (4 . 0) #6 #8) #15 #0 (0 . 0) #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #6 #8) #6 #8) #15 #3 () #7 #0 (0 . 0) #15 #0 (2 . 1) #15 #2 eq? #5 #15 #4 (#0 (0 . 0) #10 (#0 (0 . 0) #8) (#3 () #7 #0 (0 . 1) #6 #8) #8) #6 #8) #11 (0 . 0) #8) #5 #6 #8) #14 is-a? #8)(#4 (#3 () #7 #3 0 #15 #0 (0 . 0) #15 #2 vector-ref #6 #8) #14 object->class-number #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #2 *classes* #15 #2 vector-ref #6 #8) #14 object->class #8)(#4 (#3 () #7 #0 (0 . 0) #15 #2 *classes* #15 #2 vector-ref #6 #8) #14 number->class #8)(#4 (#3 () #7 #3 () #7 #1 (0 . 1) #15 #2 pair? #5 #9 (#3 () #7 #1 (0 . 1) #15 #2 car #6 #8) (#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #3 "No such class" #15 #3 symbol->class #15 #2 create-anomaly #5 #15 #2 meroon-error #6 #8) #8) #15 #2 meroon+class-name #15 #2 *classes* #15 #0 (0 . 0) #15 #2 sequence-find #6 #8) #14 symbol->class #8)(#4 (#3 () #7 #3 () #7 #1 (0 . 1) #15 #2 pair? #5 #9 (#3 () #7 #1 (0 . 1) #15 #2 car #6 #8) (#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #3 "No such generic" #15 #3 symbol->generic #15 #2 create-anomaly #5 #15 #2 meroon-error #6 #8) #8) #15 #2 meroon+generic-name #15 #2 *generics* #15 #0 (0 . 0) #15 #2 sequence-find #6 #8) #14 symbol->generic #8)(#4 (#0 (0 . 0) #8) #14 initialize! #8)(#4 (#3 () #7 #2 *generics* #15 #4 (#0 (0 . 0) #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-extend #5 #15 #0 (1 . 0) #15 #2 set-generic-dispatch-table! #6 #8) #6 #8) (#3 #f #8) #8) #15 #2 vector-map #5 #3 () #7 #2 *classes* #15 #2 vector-extend #5 #13 *classes* #3 #f #8) #14 extend-classes-number! #8)(#4 (#3 () #7 #3 wait #15 #3 #f #15 #4 (#3 () #7 #0 (1 . 0) #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 pair? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 car #5 #11 (3 . 0) #3 () #7 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #0 (2 . 0) #5 #15 #3 () #7 #0 (1 . 0) #15 #2 caar #5 #15 #2 cons #6 #8) #6 #8) (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #0 (1 . 0) #5 #15 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 cons #6 #8) #8) (#0 (0 . 0) #8) #8) #11 (0 . 0) #8) #5 #5 #11 (0 . 1) #0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #0 (1 . 1) #6 #8) (#3 () #7 #3 () #7 #0 (1 . 0) #15 #3 "No discrimination variable" #15 #3 define-method #15 #2 create-syntax-anomaly #5 #15 #2 meroon-error #6 #8) #8) #6 #8) #14 parse-disc #8)(#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #4 (#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 cdr #5 #15 #2 pair? #6 #8) #15 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 car #5 #15 #2 symbol? #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #6 #8) #15 #3 () #7 #0 (0 . 0) #15 #2 pair? #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #5 #9 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #3 "Incorrect invokation form" #15 #3 define-generic #15 #2 create-syntax-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) #3 () #7 #4 (#3 () #7 #3 () #7 #2 gensym #5 #15 #3 () #7 #2 gensym #5 #15 #3 () #7 #2 gensym #5 #15 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 last-pair #5 #15 #2 cdr #5 #15 #2 null? #5 #9 (#3 () #7 #0 (1 . 1) #15 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 0) #15 #2 cons #5 #15 #3 generic-discriminator #15 #2 cons #5 #15 #2 cons #6 #8) (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 flat #5 #15 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 0) #15 #2 cons #5 #15 #3 generic-discriminator #15 #2 cons #5 #15 #2 cons #5 #15 #3 oo-apply #15 #2 cons #6 #8) #15 #2 cons #5 #15 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 flat #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 2) #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (1 . 0) #15 #2 car #5 #15 #2 cons #5 #15 #3 object->class-number #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 0) #15 #2 cons #5 #15 #3 generic-dispatch-table #15 #2 cons #5 #15 #2 cons #5 #15 #3 vector-ref #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (1 . 0) #15 #2 car #5 #15 #2 cons #5 #15 #3 object? #15 #2 cons #5 #15 #2 cons #5 #15 #3 if #15 #2 cons #5 #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 0) #15 #2 cons #5 #15 #3 generic-discriminator #15 #2 cons #5 #15 #2 cons #5 #15 #0 (0 . 1) #15 #2 cons #5 #15 #3 eq? #15 #2 cons #5 #15 #2 cons #5 #15 #3 if #15 #2 cons #5 #15 #2 cons #5 #15 #0 (1 . 1) #15 #2 cons #5 #15 #3 lambda #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 2) #15 #2 cons #5 #15 #3 (vector-length *classes*) #15 #2 cons #5 #15 #3 make-vector #15 #2 cons #5 #15 #2 cons #5 #15 #0 (0 . 0) #15 #2 cons #5 #15 #3 set-generic-dispatch-table! #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 2) #15 #2 cons #5 #15 #0 (0 . 0) #15 #2 cons #5 #15 #3 set-generic-default! #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 1) #15 #2 cons #5 #15 #0 (0 . 0) #15 #2 cons #5 #15 #3 set-generic-discriminator! #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (2 . 0) #15 #2 cdr #5 #15 #2 cons #5 #15 #3 quote #15 #2 cons #5 #15 #2 cons #5 #15 #0 (0 . 0) #15 #2 cons #5 #15 #3 set-generic-variables! #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #1 (2 . 1) #15 #2 pair? #5 #9 (#3 () #7 #1 (2 . 1) #15 #3 begin #15 #2 cons #6 #8) (#3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 flat #5 #15 #3 "No method for" #15 #2 cons #5 #15 #0 (0 . 0) #15 #2 cons #5 #15 #3 create-domain-anomaly #15 #2 cons #5 #15 #2 cons #5 #15 #3 meroon-error #15 #2 cons #6 #8) #15 #2 cons #5 #15 #3 () #7 #0 (1 . 1) #15 #2 flat #5 #15 #2 cons #5 #15 #3 lambda #15 #2 cons #5 #15 #2 cons #5 #15 #0 (0 . 2) #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 flat #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 2) #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (1 . 0) #15 #2 car #5 #15 #2 cons #5 #15 #3 object->class-number #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 0) #15 #2 cons #5 #15 #3 generic-dispatch-table #15 #2 cons #5 #15 #2 cons #5 #15 #3 vector-ref #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (1 . 0) #15 #2 car #5 #15 #2 cons #5 #15 #3 object? #15 #2 cons #5 #15 #2 cons #5 #15 #3 if #15 #2 cons #5 #15 #2 cons #5 #15 #2 cons #5 #15 #0 (1 . 1) #15 #2 cons #5 #15 #3 lambda #15 #2 cons #5 #15 #2 cons #5 #15 #0 (0 . 1) #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 cons #5 #15 #3 quote #15 #2 cons #5 #15 #2 cons #5 #15 #3 create-generic #15 #2 cons #5 #15 #2 cons #5 #15 #0 (0 . 0) #15 #2 cons #5 #15 #2 cons #5 #15 #2 cons #5 #15 #3 letrec #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 cons #5 #15 #3 oo-set! #15 #2 cons #6 #8) #6 #8) #15 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 parse-disc #6 #8) #15 #2 apply #6 #8) #15 #3 %macro-special-form% #15 #3 define-generic #15 #2 put #5 #3 define-generic #8) #6 #8)(#4 (#3 () #7 #4 (#3 () #7 #3 () #7 #2 allocate-generic #5 #15 #4 (#3 () #7 #0 (2 . 0) #15 #0 (0 . 0) #15 #2 set-generic-name! #5 #3 () #7 #3 () #7 #2 *generics* #15 #2 vector-length #5 #15 #2 *generic-number* #15 #2 >= #5 #9 (#3 () #7 #4 (#3 () #7 #2 *generics* #15 #2 vector-extend #5 #13 *generics* #8) #6 #8) (#3 #f #8) #3 () #7 #0 (0 . 0) #15 #2 *generic-number* #15 #2 *generics* #15 #2 vector-set! #5 #3 () #7 #2 *generic-number* #15 #3 1 #15 #2 + #5 #13 *generic-number* #0 (0 . 0) #8) #6 #8) #15 #3 () #7 #4 (#3 #f #8) #15 #0 (0 . 0) #15 #2 symbol->generic #5 #15 #4 (#0 (0 . 0) #10 (#0 (0 . 0) #8) (#3 () #7 #0 (0 . 1) #6 #8) #8) #6 #8) #14 create-generic #8)(#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 car #5 #15 #2 symbol? #6 #8) #15 #3 () #7 #0 (0 . 0) #15 #2 pair? #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #5 #9 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #3 "Incorrect invokation form" #15 #3 define-method #15 #2 create-syntax-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) #3 () #7 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 pair? #5 #9 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #3 "No discriminating class" #15 #3 define-method #15 #2 create-syntax-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) #3 () #7 #3 () #7 #2 gensym #5 #15 #3 () #7 #2 gensym #5 #15 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #1 (2 . 1) #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 flat #5 #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 1) #15 #2 cons #5 #15 #3 class-super #15 #2 cons #5 #15 #2 cons #5 #15 #3 class-number #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 0) #15 #2 cons #5 #15 #3 generic-dispatch-table #15 #2 cons #5 #15 #2 cons #5 #15 #3 vector-ref #15 #2 cons #5 #15 #2 cons #5 #15 #2 cons #5 #15 #3 (call-next-method) #15 #2 cons #5 #15 #3 define #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #0 (1 . 1) #15 #2 flat #5 #15 #2 cons #5 #15 #3 lambda #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 1) #15 #2 cons #5 #15 #0 (0 . 0) #15 #2 cons #5 #15 #2 cons #5 #15 #3 lambda #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (2 . 0) #15 #2 cdr #5 #15 #2 cons #5 #15 #3 quote #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (1 . 0) #15 #2 cadr #5 #15 #2 cons #5 #15 #3 quote #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 cons #5 #15 #3 quote #15 #2 cons #5 #15 #2 cons #5 #15 #3 register-method #15 #2 cons #6 #8) #6 #8) #15 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 parse-disc #6 #8) #15 #2 apply #6 #8) #15 #3 %macro-special-form% #15 #3 define-method #15 #2 put #5 #3 define-method #8) #6 #8)(#4 (#3 () #7 #3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 3) #15 #0 (1 . 2) #15 #0 (1 . 1) #15 #0 (1 . 0) #15 #3 "No such class" #15 #3 define-method #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #15 #0 (0 . 1) #15 #2 symbol->class #5 #15 #3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 3) #15 #0 (1 . 2) #15 #0 (1 . 1) #15 #0 (1 . 0) #15 #3 "No such generic function" #15 #3 define-method #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #15 #0 (0 . 0) #15 #2 symbol->generic #5 #15 #4 (#3 () #7 #0 (1 . 2) #15 #3 () #7 #0 (0 . 0) #15 #2 generic-variables #5 #15 #2 coherent-variables? #5 #9 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 2) #15 #3 () #7 #0 (1 . 0) #15 #2 generic-variables #5 #15 #3 "Non congruent lambda-lists" #15 #3 define-method #15 #2 create-syntax-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) #3 () #7 #3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #0 (1 . 3) #5 #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 add-method! #6 #8) #6 #8) #14 register-method #8)(#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 class-number #5 #15 #3 () #7 #0 (2 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #15 #0 (0 . 1) #15 #2 eq? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (3 . 2) #15 #3 () #7 #0 (1 . 0) #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-set! #5 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-subclasses #5 #15 #4 (#3 () #7 #0 (2 . 1) #15 #3 () #7 #0 (0 . 0) #15 #2 number->class #5 #15 #0 (3 . 0) #6 #8) #15 #2 for-each #6 #8) #6 #8) (#3 #f #8) #8) #11 (0 . 0) #3 () #7 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #15 #0 (1 . 1) #15 #0 (0 . 0) #5 #0 (1 . 2) #8) #6 #8) #14 add-method! #8)(#4 (#3 () #7 #0 (0 . 0) #15 #2 pair? #5 #10 (#3 () #7 #0 (0 . 1) #15 #2 pair? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #2 coherent-variables? #6 #8) #15 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 1) #15 #2 car #5 #15 #2 symbol? #6 #8) #15 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 car #5 #15 #2 symbol? #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #6 #8) #15 #3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #2 car #5 #15 #2 pair? #6 #8) #15 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 pair? #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #5 #15 #4 (#0 (0 . 0) #10 (#0 (0 . 0) #8) (#3 () #7 #0 (0 . 1) #6 #8) #8) #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #6 #8) (#3 #f #8) #8) (#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #0 (2 . 1) #15 #2 symbol? #6 #8) #15 #3 () #7 #0 (1 . 0) #15 #2 symbol? #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #6 #8) #15 #3 () #7 #4 (#3 () #7 #0 (1 . 1) #15 #2 null? #6 #8) #15 #3 () #7 #0 (0 . 0) #15 #2 null? #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #5 #15 #4 (#0 (0 . 0) #10 (#0 (0 . 0) #8) (#3 () #7 #0 (0 . 1) #6 #8) #8) #6 #8) #8) #14 coherent-variables? #8)(#4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 object->class-number #5 #15 #2 number? #6 #8) #15 #3 () #7 #0 (0 . 0) #15 #2 vector? #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #6 #8) #14 object? #8)(#3 () #7 #3 () #7 #3 () #7 #3 object #15 #2 symbol->class #5 #15 #2 class-number #5 #15 #4 (#4 (#3 () #7 #0 (1 . 0) #15 #2 vector #6 #8) #8) #5 #14 make-object #8)(#2 make-object #14 allocate-object #8)(#3 () #7 #3 () #7 #3 object #15 #2 symbol->class #5 #15 #4 (#3 () #7 #2 object? #15 #0 (0 . 0) #15 #2 set-class-predicate! #5 #3 () #7 #2 make-object #15 #0 (0 . 0) #15 #2 set-class-allocator! #5 #3 () #7 #2 make-object #15 #0 (0 . 0) #15 #2 set-class-maker! #5 #3 "Object built" #8) #6 #8)(#3 () #7 #3 () #7 #3 () #15 #3 (name number fields super subclasses predicate allocator maker) #15 #3 () #7 #3 object #15 #2 symbol->class #5 #15 #3 class #15 #2 add-subclass #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 class-predicate #5 #14 class? #3 () #7 #0 (1 . 0) #15 #2 class-maker #5 #14 make-class #3 () #7 #0 (1 . 0) #15 #2 class-allocator #5 #14 allocate-class #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-fields #5 #15 #4 (#3 1951 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 class-name #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-class-name! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 class-number #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-class-number! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 class-fields #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-class-fields! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 class-super #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-class-super! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 class-subclasses #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-class-subclasses! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 class-predicate #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-class-predicate! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 class-allocator #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-class-allocator! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 class-maker #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-class-maker! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #6 #8) #6 #8) #5 #3 class #8) #6 #8)(#3 () #7 #3 () #7 #3 () #15 #3 (name discriminator dispatch-table default variables) #15 #3 () #7 #3 object #15 #2 symbol->class #5 #15 #3 generic #15 #2 add-subclass #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 class-predicate #5 #14 generic? #3 () #7 #0 (1 . 0) #15 #2 class-maker #5 #14 make-generic #3 () #7 #0 (1 . 0) #15 #2 class-allocator #5 #14 allocate-generic #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-fields #5 #15 #4 (#3 1951 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 generic-name #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-generic-name! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 generic-discriminator #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-generic-discriminator! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 generic-dispatch-table #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-generic-dispatch-table! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 generic-default #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-generic-default! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 generic-variables #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-generic-variables! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #6 #8) #6 #8) #5 #3 generic #8) #6 #8)(#3 () #7 #3 () #7 #3 () #15 #3 (name class reader) #15 #3 () #7 #3 object #15 #2 symbol->class #5 #15 #3 field #15 #2 add-subclass #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 class-predicate #5 #14 field? #3 () #7 #0 (1 . 0) #15 #2 class-maker #5 #14 make-field #3 () #7 #0 (1 . 0) #15 #2 class-allocator #5 #14 allocate-field #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-fields #5 #15 #4 (#3 1951 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 field-name #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-field-name! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 field-class #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-field-class! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 field-reader #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-field-reader! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #6 #8) #6 #8) #5 #3 field #8) #6 #8)(#3 () #7 #3 () #7 #3 () #15 #3 () #15 #3 () #7 #3 field #15 #2 symbol->class #5 #15 #3 mono-field #15 #2 add-subclass #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 class-predicate #5 #14 mono-field? #3 () #7 #0 (1 . 0) #15 #2 class-maker #5 #14 make-mono-field #3 () #7 #0 (1 . 0) #15 #2 class-allocator #5 #14 allocate-mono-field #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-fields #5 #15 #4 (#3 1951 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 mono-field-name #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-mono-field-name! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 mono-field-class #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-mono-field-class! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 mono-field-reader #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-mono-field-reader! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #6 #8) #6 #8) #5 #3 mono-field #8) #6 #8)(#3 () #7 #3 () #7 #3 () #15 #3 (lengther) #15 #3 () #7 #3 field #15 #2 symbol->class #5 #15 #3 poly-field #15 #2 add-subclass #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 class-predicate #5 #14 poly-field? #3 () #7 #0 (1 . 0) #15 #2 class-maker #5 #14 make-poly-field #3 () #7 #0 (1 . 0) #15 #2 class-allocator #5 #14 allocate-poly-field #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-fields #5 #15 #4 (#3 1951 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 poly-field-name #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-poly-field-name! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 poly-field-class #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-poly-field-class! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 poly-field-reader #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-poly-field-reader! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 poly-field-lengther #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-poly-field-lengther! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #6 #8) #6 #8) #5 #3 poly-field #8) #6 #8)(#3 () #7 #3 () #7 #3 () #15 #3 (writer) #15 #3 () #7 #3 mono-field #15 #2 symbol->class #5 #15 #3 mutable-mono-field #15 #2 add-subclass #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 class-predicate #5 #14 mutable-mono-field? #3 () #7 #0 (1 . 0) #15 #2 class-maker #5 #14 make-mutable-mono-field #3 () #7 #0 (1 . 0) #15 #2 class-allocator #5 #14 allocate-mutable-mono-field #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-fields #5 #15 #4 (#3 1951 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 mutable-mono-field-name #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-mutable-mono-field-name! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 mutable-mono-field-class #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-mutable-mono-field-class! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 mutable-mono-field-reader #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-mutable-mono-field-reader! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 mutable-mono-field-writer #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-mutable-mono-field-writer! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #6 #8) #6 #8) #5 #3 mutable-mono-field #8) #6 #8)(#3 () #7 #3 () #7 #3 () #15 #3 (writer) #15 #3 () #7 #3 poly-field #15 #2 symbol->class #5 #15 #3 mutable-poly-field #15 #2 add-subclass #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 class-predicate #5 #14 mutable-poly-field? #3 () #7 #0 (1 . 0) #15 #2 class-maker #5 #14 make-mutable-poly-field #3 () #7 #0 (1 . 0) #15 #2 class-allocator #5 #14 allocate-mutable-poly-field #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-fields #5 #15 #4 (#3 1951 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 mutable-poly-field-name #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-mutable-poly-field-name! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 mutable-poly-field-class #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-mutable-poly-field-class! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 mutable-poly-field-reader #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-mutable-poly-field-reader! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 mutable-poly-field-lengther #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-mutable-poly-field-lengther! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 mutable-poly-field-writer #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-mutable-poly-field-writer! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #6 #8) #6 #8) #5 #3 mutable-poly-field #8) #6 #8)(#3 () #7 #3 () #7 #3 () #15 #3 (intention message (* culprits)) #15 #3 () #7 #3 object #15 #2 symbol->class #5 #15 #3 anomaly #15 #2 add-subclass #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 class-predicate #5 #14 anomaly? #3 () #7 #0 (1 . 0) #15 #2 class-maker #5 #14 make-anomaly #3 () #7 #0 (1 . 0) #15 #2 class-allocator #5 #14 allocate-anomaly #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-fields #5 #15 #4 (#3 1951 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 anomaly-intention #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-anomaly-intention! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 anomaly-message #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-anomaly-message! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 anomaly-culprits #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-poly-field-writer #5 #14 set-anomaly-culprits! #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 poly-field-lengther #5 #14 anomaly-culprits-length #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #6 #8) #6 #8) #5 #3 anomaly #8) #6 #8)(#3 () #7 #3 () #15 #3 () #15 #3 () #15 #4 (#3 () #7 #3 initialize! #15 #2 create-generic #5 #11 (0 . 0) #4 (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) #11 (0 . 1) #4 (#3 () #7 #4 (#0 (1 . 0) #8) #6 #8) #11 (0 . 2) #3 () #7 #3 ((o)) #15 #0 (0 . 0) #15 #2 set-generic-variables! #5 #3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 set-generic-discriminator! #5 #3 () #7 #0 (0 . 2) #15 #0 (0 . 0) #15 #2 set-generic-default! #5 #3 () #7 #3 () #7 #0 (0 . 2) #15 #3 () #7 #2 *classes* #15 #2 vector-length #5 #15 #2 make-vector #5 #15 #0 (0 . 0) #15 #2 set-generic-dispatch-table! #5 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #15 #0 (1 . 1) #15 #2 eq? #5 #10 (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #6 #8) #8) #8) #5 #14 initialize! #8)(#3 () #7 #3 () #15 #3 () #15 #3 () #15 #4 (#3 () #7 #3 field-writer #15 #2 create-generic #5 #11 (0 . 0) #4 (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) #11 (0 . 1) #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #3 "No method for" #15 #0 (1 . 0) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #11 (0 . 2) #3 () #7 #3 ((o)) #15 #0 (0 . 0) #15 #2 set-generic-variables! #5 #3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 set-generic-discriminator! #5 #3 () #7 #0 (0 . 2) #15 #0 (0 . 0) #15 #2 set-generic-default! #5 #3 () #7 #3 () #7 #0 (0 . 2) #15 #3 () #7 #2 *classes* #15 #2 vector-length #5 #15 #2 make-vector #5 #15 #0 (0 . 0) #15 #2 set-generic-dispatch-table! #5 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #15 #0 (1 . 1) #15 #2 eq? #5 #10 (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #6 #8) #8) #8) #5 #14 field-writer #8)(#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 () #7 #0 (1 . 0) #15 #2 mutable-mono-field-writer #6 #8) #6 #8) #8) #15 #3 ((o mutable-mono-field)) #15 #3 mutable-mono-field #15 #3 field-writer #15 #2 register-method #6 #8)(#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 () #7 #0 (1 . 0) #15 #2 mutable-poly-field-writer #6 #8) #6 #8) #8) #15 #3 ((o mutable-poly-field)) #15 #3 mutable-poly-field #15 #3 field-writer #15 #2 register-method #6 #8)(#3 () #7 #3 () #15 #3 () #15 #3 () #15 #4 (#3 () #7 #3 mutable-field? #15 #2 create-generic #5 #11 (0 . 0) #4 (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) #11 (0 . 1) #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #3 "No method for" #15 #0 (1 . 0) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #11 (0 . 2) #3 () #7 #3 ((o)) #15 #0 (0 . 0) #15 #2 set-generic-variables! #5 #3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 set-generic-discriminator! #5 #3 () #7 #0 (0 . 2) #15 #0 (0 . 0) #15 #2 set-generic-default! #5 #3 () #7 #3 () #7 #0 (0 . 2) #15 #3 () #7 #2 *classes* #15 #2 vector-length #5 #15 #2 make-vector #5 #15 #0 (0 . 0) #15 #2 set-generic-dispatch-table! #5 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #15 #0 (1 . 1) #15 #2 eq? #5 #10 (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #6 #8) #8) #8) #5 #14 mutable-field? #8)(#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 #f #8) #6 #8) #8) #15 #3 ((o field)) #15 #3 field #15 #3 mutable-field? #15 #2 register-method #6 #8)(#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 #t #8) #6 #8) #8) #15 #3 ((o mutable-mono-field)) #15 #3 mutable-mono-field #15 #3 mutable-field? #15 #2 register-method #6 #8)(#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 #t #8) #6 #8) #8) #15 #3 ((o mutable-poly-field)) #15 #3 mutable-poly-field #15 #3 mutable-field? #15 #2 register-method #6 #8)(#3 () #7 #3 () #15 #3 () #15 #3 () #15 #4 (#3 () #7 #3 generate-related-names #15 #2 create-generic #5 #11 (0 . 0) #4 (#3 () #7 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) #11 (0 . 1) #4 (#3 () #7 #3 () #7 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 "No method for" #15 #0 (1 . 0) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #11 (0 . 2) #3 () #7 #3 ((o) name variable) #15 #0 (0 . 0) #15 #2 set-generic-variables! #5 #3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 set-generic-discriminator! #5 #3 () #7 #0 (0 . 2) #15 #0 (0 . 0) #15 #2 set-generic-default! #5 #3 () #7 #3 () #7 #0 (0 . 2) #15 #3 () #7 #2 *classes* #15 #2 vector-length #5 #15 #2 make-vector #5 #15 #0 (0 . 0) #15 #2 set-generic-dispatch-table! #5 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #15 #0 (1 . 1) #15 #2 eq? #5 #10 (#3 () #7 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) (#3 () #7 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #6 #8) #8) #8) #5 #14 generate-related-names #8)(#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 2) #15 #0 (2 . 1) #15 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 () #7 #0 (1 . 2) #15 #0 (1 . 1) #15 #0 (1 . 0) #15 #2 generate-class-related-names #6 #8) #6 #8) #8) #15 #3 ((o class) name variable) #15 #3 class #15 #3 generate-related-names #15 #2 register-method #6 #8)(#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 2) #15 #0 (2 . 1) #15 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 () #7 #0 (1 . 2) #15 #0 (1 . 1) #15 #0 (1 . 0) #15 #2 generate-field-related-names #6 #8) #6 #8) #8) #15 #3 ((o field) name variable) #15 #3 field #15 #3 generate-related-names #15 #2 register-method #6 #8)(#3 () #7 #3 () #15 #3 () #15 #3 () #15 #4 (#3 () #7 #3 add-subclass #15 #2 create-generic #5 #11 (0 . 0) #4 (#3 () #7 #0 (0 . 3) #15 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (0 . 1) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) #11 (0 . 1) #4 (#3 () #7 #3 () #7 #0 (0 . 3) #15 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 "No method for" #15 #0 (1 . 0) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #11 (0 . 2) #3 () #7 #3 (name (super-class) own-field-descs class-options) #15 #0 (0 . 0) #15 #2 set-generic-variables! #5 #3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 set-generic-discriminator! #5 #3 () #7 #0 (0 . 2) #15 #0 (0 . 0) #15 #2 set-generic-default! #5 #3 () #7 #3 () #7 #0 (0 . 2) #15 #3 () #7 #2 *classes* #15 #2 vector-length #5 #15 #2 make-vector #5 #15 #0 (0 . 0) #15 #2 set-generic-dispatch-table! #5 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #15 #0 (1 . 1) #15 #2 eq? #5 #10 (#3 () #7 #0 (0 . 3) #15 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (0 . 1) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) (#3 () #7 #0 (0 . 3) #15 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #6 #8) #8) #8) #5 #14 add-subclass #8)(#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 3) #15 #0 (2 . 2) #15 #0 (2 . 1) #15 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 () #7 #0 (1 . 3) #15 #0 (1 . 2) #15 #0 (1 . 1) #15 #0 (1 . 0) #15 #2 class-add-subclass #6 #8) #6 #8) #8) #15 #3 (name (super-class class) own-field-descs class-options) #15 #3 class #15 #3 add-subclass #15 #2 register-method #6 #8)(#3 () #7 #3 () #15 #3 () #15 #3 () #15 #4 (#3 () #7 #3 show #15 #2 create-generic #5 #11 (0 . 0) #4 (#3 () #7 #1 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) #11 (0 . 1) #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #2 pair? #5 #9 (#3 () #7 #0 (1 . 1) #15 #2 car #6 #8) (#3 () #7 #2 current-output-port #6 #8) #15 #4 (#3 () #7 #0 (2 . 0) #15 #2 symbol? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #0 (3 . 0) #15 #2 display #6 #8) #6 #8) (#3 () #7 #0 (2 . 0) #15 #2 boolean? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #0 (3 . 0) #9 (#3 "#T" #8) (#3 "#F" #8) #15 #2 display #6 #8) #6 #8) (#3 () #7 #0 (2 . 0) #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #3 "()" #15 #2 display #6 #8) #6 #8) (#3 () #7 #0 (2 . 0) #15 #2 string? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #0 (3 . 0) #15 #2 display #6 #8) #6 #8) (#3 () #7 #0 (2 . 0) #15 #2 number? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #0 (3 . 0) #15 #2 display #6 #8) #6 #8) (#3 () #7 #0 (2 . 0) #15 #2 pair? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #0 (3 . 0) #15 #2 show-list #6 #8) #6 #8) (#3 () #7 #0 (2 . 0) #15 #2 vector? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #0 (3 . 0) #15 #2 show-vector #6 #8) #6 #8) (#3 () #7 #0 (2 . 0) #15 #2 procedure? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #0 (3 . 0) #15 #2 display #6 #8) #6 #8) (#3 () #7 #0 (2 . 0) #15 #2 char? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #0 (3 . 0) #15 #2 display #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (3 . 0) #15 #3 "Does not know how to show" #15 #3 () #7 #3 show #15 #2 symbol->generic #5 #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #8) #8) #8) #8) #8) #8) #8) #6 #8) #6 #8) #11 (0 . 2) #3 () #7 #3 ((o) . stream) #15 #0 (0 . 0) #15 #2 set-generic-variables! #5 #3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 set-generic-discriminator! #5 #3 () #7 #0 (0 . 2) #15 #0 (0 . 0) #15 #2 set-generic-default! #5 #3 () #7 #3 () #7 #0 (0 . 2) #15 #3 () #7 #2 *classes* #15 #2 vector-length #5 #15 #2 make-vector #5 #15 #0 (0 . 0) #15 #2 set-generic-dispatch-table! #5 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #15 #0 (1 . 1) #15 #2 eq? #5 #10 (#3 () #7 #1 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) (#3 () #7 #1 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #15 #2 oo-apply #6 #8) #8) #8) #5 #14 show #8)(#4 (#3 () #7 #3 () #7 #1 (0 . 1) #15 #2 pair? #5 #9 (#3 () #7 #1 (0 . 1) #15 #2 car #6 #8) (#3 () #7 #2 current-output-port #6 #8) #15 #4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 show #5 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 null? #5 #10 (#3 () #7 #4 (#3 #t #8) #6 #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 pair? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (3 . 0) #15 #3 " " #15 #2 display #5 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #0 (3 . 0) #15 #3 " . " #15 #2 display #5 #3 () #7 #0 (3 . 0) #15 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #2 show #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #11 (0 . 0) #3 () #7 #0 (1 . 0) #15 #3 "(" #15 #2 display #5 #3 () #7 #0 (2 . 0) #15 #0 (0 . 0) #5 #3 () #7 #0 (1 . 0) #15 #3 ")" #15 #2 display #6 #8) #6 #8) #6 #8) #14 show-list #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 vector-length #5 #15 #3 () #7 #1 (0 . 1) #15 #2 pair? #5 #9 (#3 () #7 #1 (0 . 1) #15 #2 car #6 #8) (#3 () #7 #2 current-output-port #6 #8) #15 #4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 1) #15 #0 (0 . 0) #15 #2 < #5 #10 (#3 () #7 #4 (#3 () #7 #0 (3 . 0) #15 #3 () #7 #0 (1 . 0) #15 #0 (4 . 0) #15 #2 vector-ref #5 #15 #2 show #5 #3 () #7 #0 (3 . 0) #15 #3 " " #15 #2 display #5 #3 () #7 #3 () #7 #0 (1 . 0) #15 #3 1 #15 #2 + #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 #f #8) #8) #11 (0 . 0) #3 () #7 #0 (1 . 0) #15 #3 "#(" #15 #2 display #5 #3 () #7 #3 0 #15 #0 (0 . 0) #5 #3 () #7 #0 (1 . 0) #15 #3 ")" #15 #2 display #6 #8) #6 #8) #6 #8) #14 show-vector #8)(#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 1) #15 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 () #7 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 object->class #5 #15 #2 class-name #5 #15 #3 () #7 #0 (1 . 1) #15 #2 pair? #5 #9 (#3 () #7 #0 (1 . 1) #15 #2 car #6 #8) (#3 () #7 #2 current-output-port #6 #8) #15 #4 (#3 () #7 #0 (0 . 0) #15 #3 "#<a" #15 #2 display #5 #3 () #7 #0 (0 . 0) #15 #3 #\space #15 #2 write-char #5 #3 () #7 #0 (0 . 0) #15 #0 (0 . 1) #15 #2 display #5 #3 () #7 #0 (0 . 0) #15 #3 ">" #15 #2 display #5 #0 (2 . 0) #8) #6 #8) #6 #8) #8) #15 #3 ((o object) . stream) #15 #3 object #15 #3 show #15 #2 register-method #6 #8)(#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 1) #15 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 pair? #5 #9 (#3 () #7 #0 (1 . 1) #15 #2 car #6 #8) (#3 () #7 #2 current-output-port #6 #8) #15 #4 (#3 () #7 #0 (0 . 0) #15 #3 "#<Class: " #15 #2 display #5 #3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (2 . 0) #15 #2 class-name #5 #15 #2 display #5 #3 () #7 #0 (0 . 0) #15 #3 ">" #15 #2 display #5 #0 (2 . 0) #8) #6 #8) #6 #8) #8) #15 #3 ((o class) . stream) #15 #3 class #15 #3 show #15 #2 register-method #6 #8)(#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 1) #15 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 pair? #5 #9 (#3 () #7 #0 (1 . 1) #15 #2 car #6 #8) (#3 () #7 #2 current-output-port #6 #8) #15 #4 (#3 () #7 #0 (0 . 0) #15 #3 "#<Generic: " #15 #2 display #5 #3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (2 . 0) #15 #2 generic-name #5 #15 #2 display #5 #3 () #7 #0 (0 . 0) #15 #3 ">" #15 #2 display #5 #0 (2 . 0) #8) #6 #8) #6 #8) #8) #15 #3 ((o generic) . stream) #15 #3 generic #15 #3 show #15 #2 register-method #6 #8)(#3 () #7 #4 (#3 () #7 #0 (0 . 2) #15 #3 "#<Field" #15 #2 display #5 #3 () #7 #0 (0 . 2) #15 #0 (0 . 0) #15 #2 display #5 #3 () #7 #0 (0 . 1) #15 #2 mutable-field? #5 #9 (#3 () #7 #4 (#3 () #7 #3 "!" #15 #2 display #6 #8) #6 #8) (#3 #f #8) #3 () #7 #0 (0 . 2) #15 #3 () #7 #0 (0 . 1) #15 #2 field-name #5 #15 #2 display #5 #3 () #7 #0 (0 . 2) #15 #3 ">" #15 #2 display #5 #0 (0 . 1) #8) #15 #4 (#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 1) #15 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 pair? #5 #9 (#3 () #7 #0 (1 . 1) #15 #2 car #6 #8) (#3 () #7 #2 current-output-port #6 #8) #15 #4 (#3 () #7 #0 (0 . 0) #15 #0 (2 . 0) #15 #3 "=" #15 #0 (4 . 0) #6 #8) #6 #8) #6 #8) #8) #15 #3 ((o mono-field) . stream) #15 #3 mono-field #15 #3 show #15 #2 register-method #5 #3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 1) #15 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 pair? #5 #9 (#3 () #7 #0 (1 . 1) #15 #2 car #6 #8) (#3 () #7 #2 current-output-port #6 #8) #15 #4 (#3 () #7 #0 (0 . 0) #15 #0 (2 . 0) #15 #3 "*" #15 #0 (4 . 0) #6 #8) #6 #8) #6 #8) #8) #15 #3 ((o poly-field) . stream) #15 #3 poly-field #15 #3 show #15 #2 register-method #5 #3 show #8) #6 #8)(#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 1) #15 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 pair? #5 #9 (#3 () #7 #0 (1 . 1) #15 #2 car #6 #8) (#3 () #7 #2 current-output-port #6 #8) #15 #4 (#3 () #7 #0 (0 . 0) #15 #3 "#<" #15 #2 display #5 #3 () #7 #3 (domain-anomaly syntax-anomaly allocation-anomaly) #15 #3 () #7 #0 (2 . 0) #15 #2 anomaly-intention #5 #15 #2 memq #5 #9 (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (2 . 0) #15 #2 anomaly-intention #5 #15 #2 display #6 #8) (#3 () #7 #0 (0 . 0) #15 #3 "Anomaly" #15 #2 display #6 #8) #3 () #7 #0 (0 . 0) #15 #3 "(in:" #15 #2 display #5 #3 () #7 #3 (domain-anomaly syntax-anomaly allocation-anomaly) #15 #3 () #7 #0 (2 . 0) #15 #2 anomaly-intention #5 #15 #2 memq #5 #9 (#3 () #7 #0 (0 . 0) #15 #3 () #7 #3 0 #15 #0 (2 . 0) #15 #2 anomaly-culprits #5 #15 #2 display #6 #8) (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (2 . 0) #15 #2 anomaly-intention #5 #15 #2 display #6 #8) #3 () #7 #0 (0 . 0) #15 #3 "):" #15 #2 display #5 #3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (2 . 0) #15 #2 anomaly-message #5 #15 #2 display #5 #3 () #7 #0 (0 . 0) #15 #3 ">" #15 #2 display #6 #8) #6 #8) #6 #8) #8) #15 #3 ((o anomaly) . stream) #15 #3 anomaly #15 #3 show #15 #2 register-method #6 #8)(#3 () #7 #3 () #15 #3 () #15 #3 () #15 #4 (#3 () #7 #3 clone #15 #2 create-generic #5 #11 (0 . 0) #4 (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) #11 (0 . 1) #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #3 "No method for" #15 #0 (1 . 0) #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #11 (0 . 2) #3 () #7 #3 ((o)) #15 #0 (0 . 0) #15 #2 set-generic-variables! #5 #3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 set-generic-discriminator! #5 #3 () #7 #0 (0 . 2) #15 #0 (0 . 0) #15 #2 set-generic-default! #5 #3 () #7 #3 () #7 #0 (0 . 2) #15 #3 () #7 #2 *classes* #15 #2 vector-length #5 #15 #2 make-vector #5 #15 #0 (0 . 0) #15 #2 set-generic-dispatch-table! #5 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #15 #0 (1 . 1) #15 #2 eq? #5 #10 (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #6 #8) #8) #8) #5 #14 clone #8)(#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 vector-length #5 #15 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 make-vector #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (2 . 0) #15 #3 0 #15 #0 (1 . 0) #15 #0 (4 . 0) #15 #2 vector-copy! #5 #0 (1 . 0) #8) #6 #8) #6 #8) #6 #8) #6 #8) #8) #15 #3 ((o object)) #15 #3 object #15 #3 clone #15 #2 register-method #6 #8)(#4 (#3 () #7 #3 () #7 #1 (0 . 0) #15 #2 pair? #5 #9 (#3 () #7 #1 (0 . 0) #15 #2 car #6 #8) (#3 object #8) #15 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 symbol? #5 #9 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 symbol->class #6 #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 class? #5 #10 (#3 () #7 #4 (#0 (1 . 0) #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #3 "Not coercible to Class" #15 #3 show-hierarchy #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) (#3 () #8) #8) #8) #15 #4 (#3 () #7 #3 () #7 #1 (2 . 0) #15 #2 pair? #5 #9 (#3 () #7 #1 (2 . 0) #15 #2 cdr #6 #8) (#3 () #8) #15 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 pair? #5 #9 (#3 () #7 #0 (0 . 0) #15 #2 car #6 #8) (#3 () #7 #2 current-output-port #6 #8) #15 #4 (#3 () #7 #4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #3 0 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 1) #15 #0 (0 . 0) #15 #2 >= #5 #10 (#3 () #7 #4 (#3 () #8) #6 #8) (#3 () #7 #4 (#3 () #7 #0 (6 . 0) #15 #3 " " #15 #2 display #5 #3 () #7 #3 () #7 #0 (1 . 0) #15 #3 1 #15 #2 + #5 #15 #0 (2 . 0) #6 #8) #6 #8) #8) #11 (0 . 0) #8) #5 #5 #3 () #7 #0 (3 . 0) #15 #0 (0 . 0) #15 #2 show #5 #3 () #7 #0 (3 . 0) #15 #2 newline #5 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 class-subclasses #5 #15 #4 (#3 () #7 #3 () #7 #3 1 #15 #0 (1 . 1) #15 #2 + #5 #15 #3 () #7 #0 (0 . 0) #15 #2 number->class #5 #15 #0 (2 . 0) #6 #8) #15 #2 for-each #6 #8) #11 (0 . 0) #3 () #7 #0 (2 . 0) #15 #3 "Subclass tree of " #15 #2 display #5 #3 () #7 #0 (2 . 0) #15 #3 () #7 #0 (4 . 0) #15 #2 class-name #5 #15 #2 display #5 #3 () #7 #0 (2 . 0) #15 #2 newline #5 #3 () #7 #3 0 #15 #0 (4 . 0) #15 #0 (0 . 0) #5 #3 #t #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #14 show-hierarchy #8)(#4 (#3 () #7 #1 (0 . 0) #15 #2 pair? #5 #10 (#3 () #7 #1 (0 . 0) #15 #2 show-generic-function #15 #2 oo-apply #6 #8) (#3 () #7 #2 *generics* #15 #4 (#0 (0 . 0) #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 show-generic-function #6 #8) #6 #8) (#3 #f #8) #8) #15 #2 vector-map #6 #8) #8) #14 show-generic #8)(#4 (#3 () #7 #3 () #7 #1 (0 . 1) #15 #2 pair? #5 #9 (#3 () #7 #1 (0 . 1) #15 #2 car #6 #8) (#3 () #7 #2 current-output-port #6 #8) #15 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 symbol? #5 #9 (#3 () #7 #4 (#3 () #7 #0 (2 . 0) #15 #2 symbol->generic #6 #8) #6 #8) (#3 () #7 #0 (1 . 0) #15 #2 generic? #5 #10 (#3 () #7 #4 (#0 (2 . 0) #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #3 "Not coercible to Generic" #15 #3 show-generic #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) (#3 () #8) #8) #8) #15 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 generic-name #5 #15 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #4 (#3 () #7 #4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 class-number #5 #15 #0 (3 . 0) #15 #2 vector-ref #5 #15 #4 (#3 () #7 #0 (0 . 0) #15 #0 (1 . 1) #15 #2 eq? #5 #9 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 0 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (4 . 2) #15 #0 (0 . 0) #15 #2 >= #5 #10 (#3 () #7 #4 (#3 () #8) #6 #8) (#3 () #7 #4 (#3 () #7 #0 (11 . 0) #15 #3 " " #15 #2 display #5 #3 () #7 #3 () #7 #0 (1 . 0) #15 #3 1 #15 #2 + #5 #15 #0 (2 . 0) #6 #8) #6 #8) #8) #11 (0 . 0) #8) #5 #5 #3 () #7 #0 (8 . 0) #15 #0 (2 . 0) #15 #2 show #5 #3 () #7 #0 (8 . 0) #15 #2 newline #6 #8) #6 #8) #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-subclasses #5 #15 #4 (#3 () #7 #3 () #7 #3 1 #15 #0 (2 . 2) #15 #2 + #5 #15 #0 (1 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 number->class #5 #15 #0 (3 . 0) #6 #8) #15 #2 for-each #6 #8) #6 #8) #11 (0 . 0) #3 () #7 #0 (5 . 0) #15 #3 "Methods on " #15 #2 display #5 #3 () #7 #0 (5 . 0) #15 #0 (3 . 0) #15 #2 display #5 #3 () #7 #0 (5 . 0) #15 #2 newline #5 #3 () #7 #3 0 #15 #3 () #7 #0 (4 . 0) #15 #2 generic-default #5 #15 #3 () #7 #3 object #15 #2 symbol->class #5 #15 #0 (0 . 0) #5 #3 #t #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #14 show-generic-function #8)(#3 "Meroon $Revision: 2.22 $ of $Date: 1992/11/12 18:37:32 $." #14 meroon-version #8)(#4 (#3 () #7 #3 () #7 #1 (0 . 0) #15 #2 pair? #5 #9 (#3 () #7 #1 (0 . 0) #15 #2 car #6 #8) (#3 () #7 #2 current-output-port #6 #8) #15 #4 (#3 () #7 #0 (0 . 0) #15 #2 newline #5 #3 () #7 #0 (0 . 0) #15 #2 meroon-version #15 #2 display #5 #3 () #7 #0 (0 . 0) #15 #2 newline #5 #3 () #7 #0 (0 . 0) #15 #3 "Total number of classes: " #15 #2 display #5 #3 () #7 #0 (0 . 0) #15 #2 *class-number* #15 #2 display #5 #3 () #7 #0 (0 . 0) #15 #2 newline #5 #3 () #7 #0 (0 . 0) #15 #3 "Total number of generic functions: " #15 #2 display #5 #3 () #7 #0 (0 . 0) #15 #2 *generic-number* #15 #2 display #5 #3 () #7 #0 (0 . 0) #15 #2 newline #5 #3 #t #8) #6 #8) #14 show-meroon #8)(#4 (#3 () #7 #0 (0 . 0) #15 #2 generic? #5 #9 (#3 () #7 #4 (#3 #t #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 symbol? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 symbol->generic #5 #11 (1 . 0) #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #3 "Not coercible to Generic" #15 #3 generic-trace #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) (#3 () #8) #8) #8) #3 () #7 #0 (0 . 1) #15 #2 procedure? #5 #9 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #3 "Not a procedure" #15 #3 generic-trace #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) #3 () #7 #0 (0 . 2) #15 #2 procedure? #5 #9 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #3 "Not a procedure" #15 #3 generic-trace #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) #3 () #7 #3 () #7 #2 *traced-generics* #15 #3 () #7 #0 (0 . 0) #15 #2 generic-name #5 #15 #2 assq #5 #15 #4 (#3 () #7 #3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 generic-discriminator #5 #15 #3 () #7 #0 (2 . 0) #15 #2 generic-name #5 #15 #2 list #6 #8) #15 #0 (0 . 0) #15 #4 (#0 (0 . 0) #10 (#0 (0 . 0) #8) (#3 () #7 #0 (0 . 1) #6 #8) #8) #5 #15 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cadr #5 #15 #4 (#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #1 (0 . 0) #15 #0 (5 . 1) #15 #2 oo-apply #5 #3 () #7 #3 () #7 #1 (0 . 0) #15 #0 (2 . 0) #15 #2 oo-apply #5 #15 #0 (5 . 2) #6 #8) #15 #0 (4 . 0) #15 #2 set-generic-discriminator! #5 #0 (3 . 0) #9 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #2 *traced-generics* #15 #0 (3 . 0) #15 #2 cons #5 #13 *traced-generics* #8) #6 #8) #0 (4 . 0) #8) #6 #8) #6 #8) #6 #8) #6 #8) #14 generic-trace #8)(#4 (#3 () #7 #0 (0 . 0) #15 #2 generic? #5 #9 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #3 "Not a Generic object" #15 #3 generic-untrace #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) #3 () #7 #3 () #7 #2 *traced-generics* #15 #3 1936 #15 #2 cons #5 #15 #3 () #7 #0 (0 . 0) #15 #2 generic-name #5 #15 #4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 null? #5 #10 (#3 () #7 #4 (#3 #t #8) #6 #8) (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cadr #5 #15 #2 car #5 #15 #0 (2 . 0) #15 #2 eq? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 cadr #5 #15 #2 cadr #5 #15 #0 (4 . 0) #15 #2 set-generic-discriminator! #5 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 cddr #5 #15 #0 (1 . 0) #15 #2 set-cdr! #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #11 (0 . 0) #3 () #7 #0 (1 . 1) #15 #0 (0 . 0) #5 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #13 *traced-generics* #8) #6 #8) #5 #0 (0 . 0) #8) #14 generic-untrace #8)(#4 (#3 () #7 #1 (0 . 0) #15 #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 show #5 #3 () #7 #3 ">> " #15 #2 display #5 #3 () #7 #0 (0 . 0) #15 #2 show #5 #3 () #7 #2 newline #5 #0 (0 . 0) #8) #15 #4 (#3 () #7 #0 (1 . 0) #15 #2 show #5 #3 () #7 #3 "<<" #15 #2 display #5 #3 () #7 #1 (0 . 0) #15 #4 (#3 () #7 #3 " " #15 #2 display #5 #3 () #7 #0 (0 . 0) #15 #2 show #6 #8) #15 #2 for-each #5 #3 () #7 #2 newline #6 #8) #15 #3 () #7 #0 (0 . 0) #15 #2 symbol? #5 #9 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 symbol->generic #6 #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 generic? #5 #10 (#3 () #7 #4 (#0 (1 . 0) #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #3 "Not coercible to Generic" #15 #3 show-generic-trace #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) (#3 () #8) #8) #8) #15 #2 generic-trace #6 #8) #15 #2 for-each #6 #8) #14 show-generic-trace #8)(#4 (#3 () #7 #3 () #7 #1 (0 . 0) #15 #2 pair? #5 #9 (#1 (0 . 0) #8) (#2 *traced-generics* #8) #15 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 symbol? #5 #9 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 symbol->generic #6 #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 generic? #5 #10 (#3 () #7 #4 (#0 (1 . 0) #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #3 "Not coercible to Generic" #15 #3 show-generic-untrace #15 #2 create-domain-anomaly #5 #15 #2 meroon-error #6 #8) #6 #8) (#3 () #8) #8) #8) #15 #2 generic-untrace #6 #8) #15 #2 for-each #6 #8) #14 show-generic-untrace #8)(#3 () #7 #3 () #7 #3 () #15 #3 () #15 #3 () #7 #3 anomaly #15 #2 symbol->class #5 #15 #3 syntax-anomaly #15 #2 add-subclass #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 class-predicate #5 #14 syntax-anomaly? #3 () #7 #0 (1 . 0) #15 #2 class-maker #5 #14 make-syntax-anomaly #3 () #7 #0 (1 . 0) #15 #2 class-allocator #5 #14 allocate-syntax-anomaly #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-fields #5 #15 #4 (#3 1951 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 syntax-anomaly-intention #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-syntax-anomaly-intention! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 syntax-anomaly-message #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-syntax-anomaly-message! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 syntax-anomaly-culprits #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-poly-field-writer #5 #14 set-syntax-anomaly-culprits! #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 poly-field-lengther #5 #14 syntax-anomaly-culprits-length #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #6 #8) #6 #8) #5 #3 syntax-anomaly #8) #6 #8)(#3 () #7 #3 () #7 #3 () #15 #3 () #15 #3 () #7 #3 anomaly #15 #2 symbol->class #5 #15 #3 domain-anomaly #15 #2 add-subclass #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 class-predicate #5 #14 domain-anomaly? #3 () #7 #0 (1 . 0) #15 #2 class-maker #5 #14 make-domain-anomaly #3 () #7 #0 (1 . 0) #15 #2 class-allocator #5 #14 allocate-domain-anomaly #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-fields #5 #15 #4 (#3 1951 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 domain-anomaly-intention #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-domain-anomaly-intention! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 domain-anomaly-message #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-domain-anomaly-message! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 domain-anomaly-culprits #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-poly-field-writer #5 #14 set-domain-anomaly-culprits! #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 poly-field-lengther #5 #14 domain-anomaly-culprits-length #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #6 #8) #6 #8) #5 #3 domain-anomaly #8) #6 #8)(#3 () #7 #3 () #7 #3 () #15 #3 () #15 #3 () #7 #3 anomaly #15 #2 symbol->class #5 #15 #3 allocation-anomaly #15 #2 add-subclass #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 class-predicate #5 #14 allocation-anomaly? #3 () #7 #0 (1 . 0) #15 #2 class-maker #5 #14 make-allocation-anomaly #3 () #7 #0 (1 . 0) #15 #2 class-allocator #5 #14 allocate-allocation-anomaly #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-fields #5 #15 #4 (#3 1951 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 allocation-anomaly-intention #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-allocation-anomaly-intention! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 allocation-anomaly-message #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-mono-field-writer #5 #14 set-allocation-anomaly-message! #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #5 #3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 field-reader #5 #14 allocation-anomaly-culprits #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 mutable-poly-field-writer #5 #14 set-allocation-anomaly-culprits! #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 car #5 #15 #2 poly-field-lengther #5 #14 allocation-anomaly-culprits-length #8) #5 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #11 (1 . 0) #8) #6 #8) #6 #8) #5 #3 allocation-anomaly #8) #6 #8)(#4 (#3 () #7 #1 (0 . 2) #15 #3 () #7 #1 (0 . 2) #15 #2 length #5 #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 make-domain-anomaly #15 #2 oo-apply #6 #8) #14 create-domain-anomaly #8)(#4 (#3 () #7 #1 (0 . 2) #15 #3 () #7 #1 (0 . 2) #15 #2 length #5 #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 make-syntax-anomaly #15 #2 oo-apply #6 #8) #14 create-syntax-anomaly #8)(#4 (#3 () #7 #1 (0 . 2) #15 #3 () #7 #1 (0 . 2) #15 #2 length #5 #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 make-allocation-anomaly #15 #2 oo-apply #6 #8) #14 create-allocation-anomaly #8)(#4 (#3 () #7 #1 (0 . 2) #15 #3 () #7 #1 (0 . 2) #15 #2 length #5 #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 make-anomaly #15 #2 oo-apply #6 #8) #14 create-anomaly #8)(#3 () #7 #3 () #15 #3 () #15 #3 () #15 #4 (#3 () #7 #3 meroon-error #15 #2 create-generic #5 #11 (0 . 0) #4 (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) #11 (0 . 1) #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #3 "Error" #15 #3 meroon #15 #2 oo-error #6 #8) #6 #8) #11 (0 . 2) #3 () #7 #3 ((anomaly)) #15 #0 (0 . 0) #15 #2 set-generic-variables! #5 #3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 set-generic-discriminator! #5 #3 () #7 #0 (0 . 2) #15 #0 (0 . 0) #15 #2 set-generic-default! #5 #3 () #7 #3 () #7 #0 (0 . 2) #15 #3 () #7 #2 *classes* #15 #2 vector-length #5 #15 #2 make-vector #5 #15 #0 (0 . 0) #15 #2 set-generic-dispatch-table! #5 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #15 #0 (1 . 1) #15 #2 eq? #5 #10 (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #6 #8) #8) #8) #5 #14 meroon-error #8)(#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #0 (1 . 0) #13 *last-meroon-anomaly* #3 () #7 #0 (1 . 0) #15 #3 () #7 #0 (1 . 0) #15 #2 anomaly-message #5 #15 #3 () #7 #0 (1 . 0) #15 #2 anomaly-intention #5 #15 #2 oo-error #6 #8) #6 #8) #8) #15 #3 ((o anomaly)) #15 #3 anomaly #15 #3 meroon-error #15 #2 register-method #6 #8)(#3 () #7 #4 (#3 () #7 #2 newline #5 #3 () #7 #3 "******************* Meroon " #15 #2 display #5 #3 () #7 #0 (0 . 1) #15 #2 display #5 #3 () #7 #3 " Anomaly *********************" #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 "Occurred in: " #15 #2 display #5 #3 () #7 #0 (0 . 2) #15 #2 show #5 #3 () #7 #2 newline #5 #3 () #7 #3 "Reason: " #15 #2 display #5 #3 () #7 #0 (0 . 3) #15 #2 show #5 #3 () #7 #2 newline #5 #3 () #7 #3 0 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #3 () #7 #0 (2 . 0) #15 #2 anomaly-culprits-length #5 #15 #0 (0 . 0) #15 #2 = #5 #10 (#3 () #7 #4 (#3 #f #8) #6 #8) (#3 () #7 #4 (#3 () #7 #3 "Culprit#" #15 #2 display #5 #3 () #7 #0 (1 . 0) #15 #2 display #5 #3 () #7 #3 ": " #15 #2 display #5 #3 () #7 #3 () #7 #0 (1 . 0) #15 #0 (3 . 0) #15 #2 anomaly-culprits #5 #15 #2 show #5 #3 () #7 #2 newline #5 #3 () #7 #3 () #7 #0 (1 . 0) #15 #3 1 #15 #2 + #5 #15 #0 (2 . 0) #6 #8) #6 #8) #8) #11 (0 . 0) #8) #5 #6 #8) #15 #4 (#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 anomaly-message #5 #15 #3 () #7 #0 (1 . 0) #15 #2 anomaly-intention #5 #15 #3 syntax #15 #0 (1 . 0) #15 #0 (3 . 0) #5 #3 () #7 #0 (0 . 0) #6 #8) #6 #8) #8) #15 #3 ((o syntax-anomaly)) #15 #3 syntax-anomaly #15 #3 meroon-error #15 #2 register-method #5 #3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 anomaly-intention #5 #15 #2 field? #5 #9 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 anomaly-message #5 #15 #3 () #7 #0 (1 . 0) #15 #2 anomaly-intention #5 #15 #3 access #15 #0 (1 . 0) #15 #0 (3 . 0) #6 #8) (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 anomaly-message #5 #15 #3 () #7 #0 (1 . 0) #15 #2 anomaly-intention #5 #15 #3 domain #15 #0 (1 . 0) #15 #0 (3 . 0) #6 #8) #3 () #7 #0 (0 . 0) #6 #8) #6 #8) #8) #15 #3 ((o domain-anomaly)) #15 #3 domain-anomaly #15 #3 meroon-error #15 #2 register-method #5 #3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 anomaly-message #5 #15 #3 () #7 #0 (1 . 0) #15 #2 anomaly-intention #5 #15 #3 allocation #15 #0 (1 . 0) #15 #0 (3 . 0) #5 #3 () #7 #0 (0 . 0) #6 #8) #6 #8) #8) #15 #3 ((o allocation-anomaly)) #15 #3 allocation-anomaly #15 #3 meroon-error #15 #2 register-method #6 #8) #6 #8)(#3 () #14 *meroon-already-seen-objects* #8)(#4 (#3 () #7 #3 () #7 #1 (0 . 1) #15 #2 pair? #5 #9 (#3 () #7 #1 (0 . 1) #15 #2 car #6 #8) (#3 () #7 #2 current-output-port #6 #8) #15 #4 (#3 () #13 *meroon-already-seen-objects* #3 () #7 #0 (0 . 0) #15 #3 0 #15 #0 (1 . 0) #15 #2 show-unveiled #5 #3 () #13 *meroon-already-seen-objects* #3 #t #8) #6 #8) #14 unveil #8)(#3 () #7 #3 () #15 #3 () #15 #3 () #15 #4 (#3 () #7 #3 show-unveiled #15 #2 create-generic #5 #11 (0 . 0) #4 (#3 () #7 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) #11 (0 . 1) #4 (#3 () #7 #4 (#3 () #7 #0 (1 . 2) #15 #0 (1 . 0) #15 #2 show #6 #8) #6 #8) #11 (0 . 2) #3 () #7 #3 ((o) indent stream) #15 #0 (0 . 0) #15 #2 set-generic-variables! #5 #3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 set-generic-discriminator! #5 #3 () #7 #0 (0 . 2) #15 #0 (0 . 0) #15 #2 set-generic-default! #5 #3 () #7 #3 () #7 #0 (0 . 2) #15 #3 () #7 #2 *classes* #15 #2 vector-length #5 #15 #2 make-vector #5 #15 #0 (0 . 0) #15 #2 set-generic-dispatch-table! #5 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #15 #0 (1 . 1) #15 #2 eq? #5 #10 (#3 () #7 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 object? #5 #9 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class-number #5 #15 #3 () #7 #0 (1 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #6 #8) (#0 (1 . 2) #8) #6 #8) (#3 () #7 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (1 . 0) #15 #2 generic-discriminator #5 #6 #8) #8) #8) #5 #14 show-unveiled #8)(#4 (#3 () #7 #3 () #15 #3 () #15 #4 (#3 2 #11 (0 . 0) #3 () #7 #0 (0 . 0) #15 #3 3 #15 #2 * #5 #11 (0 . 1) #3 () #7 #0 (1 . 1) #15 #2 newline #5 #3 () #7 #3 0 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (3 . 0) #15 #0 (0 . 0) #15 #2 = #5 #10 (#3 () #7 #4 (#3 #f #8) #6 #8) (#3 () #7 #4 (#3 () #7 #0 (4 . 1) #15 #3 () #7 #3 () #7 #0 (3 . 1) #15 #0 (1 . 0) #15 #2 modulo #5 #15 #3 () #7 #3 1 #15 #0 (3 . 1) #15 #2 - #5 #15 #2 = #5 #9 (#3 () #7 #4 (#3 #\* #8) #6 #8) (#3 () #7 #3 () #7 #0 (3 . 0) #15 #0 (1 . 0) #15 #2 modulo #5 #15 #3 () #7 #3 1 #15 #0 (3 . 0) #15 #2 - #5 #15 #2 = #5 #10 (#3 () #7 #4 (#3 #\| #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 #\space #8) #6 #8) (#3 () #8) #8) #8) #15 #2 write-char #5 #3 () #7 #3 () #7 #0 (1 . 0) #15 #3 1 #15 #2 + #5 #15 #0 (2 . 0) #6 #8) #6 #8) #8) #11 (0 . 0) #8) #5 #6 #8) #6 #8) #14 goto-margin #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 object->class #5 #15 #4 (#3 () #7 #3 () #7 #2 *meroon-already-seen-objects* #15 #0 (1 . 0) #15 #2 memq #5 #15 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 pair? #5 #9 (#3 () #7 #0 (0 . 0) #15 #2 length #6 #8) (#3 () #7 #4 (#3 () #7 #2 *meroon-already-seen-objects* #15 #0 (3 . 0) #15 #2 cons #5 #13 *meroon-already-seen-objects* #3 () #7 #2 *meroon-already-seen-objects* #15 #2 length #6 #8) #6 #8) #15 #4 (#3 () #7 #4 (#0 (2 . 0) #10 (#3 () #7 #4 (#3 () #7 #0 (5 . 2) #15 #3 "<the " #15 #2 display #5 #3 () #7 #0 (5 . 2) #15 #3 () #7 #0 (4 . 0) #15 #2 class-name #5 #15 #2 display #5 #3 () #7 #0 (5 . 2) #15 #3 " referred above as " #15 #2 display #5 #3 () #7 #0 (5 . 2) #15 #0 (2 . 0) #15 #2 display #5 #3 () #7 #0 (5 . 2) #15 #3 ">" #15 #2 display #6 #8) #6 #8) (#3 () #7 #4 (#3 () #7 #0 (5 . 2) #15 #0 (5 . 1) #15 #2 goto-margin #5 #3 () #7 #0 (5 . 2) #15 #3 "(a " #15 #2 display #5 #3 () #7 #0 (5 . 2) #15 #3 () #7 #0 (4 . 0) #15 #2 class-name #5 #15 #2 display #5 #3 () #7 #0 (5 . 2) #15 #3 " <------------- [Id: " #15 #2 display #5 #3 () #7 #0 (5 . 2) #15 #0 (2 . 0) #15 #2 display #5 #3 () #7 #0 (5 . 2) #15 #3 "]" #15 #2 display #5 #3 () #7 #3 () #7 #0 (5 . 1) #15 #3 1 #15 #2 + #5 #15 #4 (#3 () #7 #3 () #7 #0 (5 . 0) #15 #2 class-fields #5 #15 #0 (6 . 3) #15 #0 (6 . 2) #15 #0 (0 . 0) #15 #0 (6 . 0) #15 #2 generic-show-unveiled-field-content #6 #8) #5 #3 () #7 #0 (5 . 2) #15 #3 " end " #15 #2 display #5 #3 () #7 #0 (5 . 2) #15 #3 () #7 #0 (4 . 0) #15 #2 class-name #5 #15 #2 display #5 #3 () #7 #0 (5 . 2) #15 #3 ")" #15 #2 display #6 #8) #6 #8) #8) #6 #8) #6 #8) #6 #8) #6 #8) #14 generic-show-unveiled #8)(#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 1) #15 #2 pair? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (3 . 2) #15 #0 (3 . 1) #15 #2 goto-margin #5 #3 () #7 #0 (1 . 0) #15 #2 pair? #5 #9 (#3 () #7 #4 (#3 () #7 #0 (4 . 2) #15 #3 () #7 #3 () #7 #0 (2 . 1) #15 #2 car #5 #15 #2 field-name #5 #15 #2 display #5 #3 () #7 #0 (4 . 2) #15 #3 ": " #15 #2 display #5 #3 () #7 #0 (4 . 2) #15 #0 (4 . 1) #15 #3 () #7 #0 (4 . 0) #15 #3 () #7 #3 () #7 #0 (2 . 1) #15 #2 car #5 #15 #2 field-reader #5 #5 #15 #3 () #7 #0 (2 . 0) #15 #2 car #5 #6 #8) #6 #8) (#3 () #7 #3 () #7 #0 (1 . 1) #15 #2 car #5 #15 #2 mono-field? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (4 . 2) #15 #3 () #7 #3 () #7 #0 (2 . 1) #15 #2 car #5 #15 #2 field-name #5 #15 #2 display #5 #3 () #7 #0 (4 . 2) #15 #3 ": " #15 #2 display #5 #3 () #7 #0 (4 . 2) #15 #0 (4 . 1) #15 #3 () #7 #0 (4 . 0) #15 #3 () #7 #3 () #7 #0 (2 . 1) #15 #2 car #5 #15 #2 field-reader #5 #5 #15 #2 show-unveiled #6 #8) #6 #8) (#3 () #7 #3 () #7 #0 (1 . 1) #15 #2 car #5 #15 #2 poly-field? #5 #10 (#3 () #7 #4 (#3 () #7 #3 0 #15 #3 () #7 #0 (4 . 0) #15 #3 () #7 #3 () #7 #0 (2 . 1) #15 #2 car #5 #15 #2 poly-field-lengther #5 #5 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #0 (0 . 1) #15 #2 < #5 #10 (#3 () #7 #4 (#3 () #7 #0 (7 . 2) #15 #3 () #7 #3 () #7 #0 (5 . 1) #15 #2 car #5 #15 #2 field-name #5 #15 #2 display #5 #3 () #7 #0 (7 . 2) #15 #3 "[" #15 #2 display #5 #3 () #7 #0 (7 . 2) #15 #0 (1 . 1) #15 #2 display #5 #3 () #7 #0 (7 . 2) #15 #3 "]: " #15 #2 display #5 #3 () #7 #0 (7 . 2) #15 #0 (7 . 1) #15 #3 () #7 #0 (1 . 1) #15 #0 (7 . 0) #15 #3 () #7 #3 () #7 #0 (5 . 1) #15 #2 car #5 #15 #2 field-reader #5 #5 #15 #2 show-unveiled #5 #3 () #7 #0 (7 . 2) #15 #0 (7 . 1) #15 #2 goto-margin #5 #3 () #7 #3 () #7 #0 (1 . 1) #15 #3 1 #15 #2 + #5 #15 #0 (1 . 0) #15 #0 (2 . 0) #6 #8) #6 #8) (#3 #f #8) #8) #11 (0 . 0) #8) #5 #6 #8) #6 #8) (#3 () #8) #8) #8) #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 () #7 #0 (1 . 0) #15 #2 pair? #5 #9 (#3 () #7 #0 (1 . 0) #15 #2 cdr #6 #8) (#3 () #8) #15 #0 (2 . 0) #6 #8) #6 #8) (#3 #f #8) #8) #11 (0 . 0) #3 () #7 #0 (1 . 4) #15 #0 (1 . 3) #15 #0 (0 . 0) #6 #8) #6 #8) #14 generic-show-unveiled-field-content #8)(#3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (2 . 2) #15 #0 (2 . 1) #15 #0 (2 . 0) #15 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 1) #15 #2 class-super #5 #15 #2 class-number #5 #15 #3 () #7 #0 (3 . 0) #15 #2 generic-dispatch-table #5 #15 #2 vector-ref #5 #6 #8) #11 (0 . 0) #3 () #7 #3 () #15 #0 (1 . 2) #15 #0 (1 . 1) #15 #0 (1 . 0) #15 #2 generic-show-unveiled #6 #8) #6 #8) #8) #15 #3 ((o object) indent stream) #15 #3 object #15 #3 show-unveiled #15 #2 register-method #6 #8)