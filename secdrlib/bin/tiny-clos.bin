(#3 secdr #14 what-scheme-implementation #8)(#3 unspecified-result #14 ??? #8)(#3 () #7 #2 what-scheme-implementation #15 #4 (#3 () #7 #3 (mit) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #2 formals #15 #2 pair? #5 #15 #2 not #5 #9 (#3 () #7 #3 "DEFINE-MACRO: First argument must be formals." #15 #2 error #6 #8) (#3 #f #8) #15 #3 %macro-special-form% #15 #3 (formals . body) #15 #2 put #5 #3 (formals . body) #8) #5 #15 #3 define-macro #15 #2 user-initial-syntax-table #15 #2 syntax-table/define #6 #8) #6 #8) (#3 () #7 #3 (chez) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#2 ??? #8) #6 #8) (#3 () #7 #3 (secdr) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#2 ??? #8) #6 #8) (#3 () #7 #3 (r4rs) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#2 ??? #8) #6 #8) (#3 () #8) #8) #8) #8) #8) #6 #8)(#3 () #7 #2 what-scheme-implementation #15 #4 (#3 () #7 #3 (mit) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #0 (0 . 1) #15 #2 sort #6 #8) #8) #6 #8) (#3 () #7 #3 (chez) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#4 (#3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 sort #6 #8) #8) #6 #8) (#3 () #7 #3 (secdr) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #0 (0 . 1) #15 #2 qsort #6 #8) #8) #6 #8) (#3 () #7 #3 (r4rs) #15 #0 (0 . 0) #15 #2 memv #5 #10 (#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 sort #15 #2 require #5 #4 (#3 () #7 #0 (0 . 0) #15 #0 (0 . 1) #15 #2 sort #6 #8) #8) #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #8) #5 #14 gsort #8)(#4 (#2 barf #8) #14 simple-printer #8)(#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #8) #6 #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 car #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #0 (2 . 0) #5 #15 #3 () #7 #0 (1 . 0) #15 #2 car #5 #15 #2 cons #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #11 (0 . 0) #3 () #7 #1 (1 . 0) #15 #0 (0 . 0) #6 #8) #6 #8) #14 list* #8)(#4 (#3 () #7 #3 () #7 #1 (0 . 1) #15 #2 list* #15 #2 apply #5 #15 #0 (0 . 0) #15 #2 apply #6 #8) #14 apply* #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #0 (0 . 0) #15 #2 eq? #5 #10 (#3 0 #8) (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 1) #15 #2 cdr #5 #15 #0 (0 . 0) #15 #2 position-of #5 #15 #3 1 #15 #2 + #6 #8) #8) #14 position-of #8)(#4 (#3 () #7 #3 () #7 #3 () #7 #1 (0 . 1) #15 #0 (0 . 0) #15 #2 cons #5 #15 #2 map #15 #2 apply #5 #15 #2 append #15 #2 apply #6 #8) #14 map-append #8)(#4 (#3 () #7 #0 (0 . 0) #15 #2 null? #5 #10 (#3 #f #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 null? #5 #10 (#3 () #7 #0 (0 . 0) #15 #2 car #6 #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 last #6 #8) #8) #8) #14 last #8)(#4 (#3 () #7 #1 (0 . 1) #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 null? #15 #2 map #5 #15 #3 #t #15 #2 member #5 #10 (#3 #t #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 cdr #15 #2 map #5 #15 #0 (2 . 0) #6 #8) #15 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #15 #2 map #5 #15 #0 (2 . 0) #15 #2 apply #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #6 #8) #8) #11 (0 . 0) #8) #5 #6 #8) #14 every #8)(#4 (#3 () #7 #0 (0 . 1) #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #2 eq? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 1) #15 #2 cdr #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #0 (1 . 0) #15 #2 remove #5 #15 #3 () #7 #0 (1 . 1) #15 #2 car #5 #15 #2 cons #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #14 remove #8)(#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #7 #1 (3 . 2) #15 #2 pair? #5 #10 (#3 () #7 #1 (3 . 2) #15 #2 car #6 #8) (#3 () #7 #0 (3 . 1) #15 #3 "GETL couldn't find" #15 #2 error #6 #8) #8) #6 #8) (#3 () #7 #0 (2 . 1) #15 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 eq? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 cadr #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 cddr #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #11 (0 . 0) #3 () #7 #0 (1 . 0) #15 #0 (0 . 0) #6 #8) #6 #8) #14 getl #8)(#4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 null? #5 #10 (#3 () #7 #4 (#0 (1 . 1) #8) #6 #8) (#3 () #7 #0 (0 . 1) #15 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 memq #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 1) #15 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #3 () #7 #0 (1 . 0) #15 #2 car #5 #15 #2 cons #5 #15 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #11 (0 . 0) #3 () #7 #3 () #15 #3 () #7 #1 (1 . 0) #15 #2 append #15 #2 apply #5 #15 #0 (0 . 0) #6 #8) #6 #8) #14 union #8)(#4 (#3 () #7 #0 (0 . 1) #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #8) #6 #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #0 (0 . 0) #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #0 (1 . 0) #15 #2 filter-in #5 #15 #3 () #7 #0 (1 . 1) #15 #2 car #5 #15 #2 cons #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #0 (1 . 0) #15 #2 filter-in #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #14 filter-in #8)(#4 (#3 () #7 #0 (0 . 1) #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #8) #6 #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #0 (0 . 0) #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #0 (1 . 0) #15 #2 collect-if #5 #15 #3 () #7 #0 (1 . 1) #15 #2 car #5 #15 #2 cons #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #0 (1 . 0) #15 #2 collect-if #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #14 collect-if #8)(#4 (#3 () #7 #0 (0 . 0) #15 #3 () #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 1) #15 #2 null? #5 #10 (#0 (0 . 0) #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #2 memq #5 #15 #2 not #5 #10 (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 cdr #5 #15 #3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #2 cons #5 #15 #0 (1 . 0) #6 #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 cdr #5 #15 #0 (0 . 0) #15 #0 (1 . 0) #6 #8) #8) #8) #11 (0 . 0) #8) #5 #6 #8) #14 remove-duplicates #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 std-tie-breaker #5 #15 #3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (0 . 1) #15 #2 build-constraints #5 #5 #15 #3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (0 . 1) #15 #2 build-transitive-closure #5 #5 #15 #2 top-sort #6 #8) #14 compute-std-cpl #8)(#4 (#3 () #7 #3 () #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 null? #5 #10 (#0 (0 . 2) #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #4 (#3 () #7 #0 (1 . 1) #15 #4 (#3 () #7 #4 (#3 () #7 #0 (3 . 2) #15 #3 () #7 #0 (1 . 0) #15 #2 car #5 #15 #2 memq #6 #8) #15 #3 () #7 #3 () #7 #0 (1 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 cadr #5 #15 #2 eq? #5 #15 #2 not #5 #15 #4 (#0 (0 . 0) #10 (#0 (0 . 0) #8) (#3 () #7 #0 (0 . 1) #6 #8) #8) #6 #8) #15 #2 every #6 #8) #15 #2 filter-in #5 #15 #4 (#3 () #7 #0 (0 . 0) #15 #2 null? #5 #10 (#3 () #7 #3 "Invalid constraints" #15 #3 top-sort #15 #2 error #6 #8) (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 null? #5 #9 (#3 () #7 #0 (0 . 0) #15 #2 car #6 #8) (#3 () #7 #0 (0 . 0) #15 #0 (1 . 2) #15 #0 (3 . 2) #6 #8) #15 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 list #5 #15 #0 (2 . 2) #15 #2 append #5 #15 #0 (2 . 1) #15 #3 () #7 #0 (2 . 0) #15 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #0 (0 . 0) #15 #2 eq? #5 #15 #2 not #6 #8) #15 #2 filter-in #5 #15 #0 (3 . 0) #6 #8) #6 #8) #8) #6 #8) #8) #11 (0 . 0) #8) #5 #6 #8) #14 top-sort #8)(#4 (#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 reverse #5 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #0 (4 . 0) #5 #15 #4 (#3 () #7 #3 () #7 #0 (4 . 1) #15 #4 (#3 () #7 #0 (1 . 0) #15 #0 (0 . 0) #15 #2 memq #6 #8) #15 #2 filter-in #5 #15 #4 (#3 () #7 #0 (0 . 0) #15 #2 null? #5 #10 (#3 () #7 #3 () #7 #0 (3 . 0) #15 #2 cdr #5 #15 #2 null? #5 #10 (#3 () #7 #3 "Nothing valid" #15 #3 std-tie-breaker #15 #2 error #6 #8) (#3 () #7 #3 () #7 #0 (3 . 0) #15 #2 cdr #5 #15 #0 (4 . 0) #6 #8) #8) (#3 () #7 #0 (0 . 0) #15 #2 car #6 #8) #8) #6 #8) #6 #8) #6 #8) #11 (0 . 0) #8) #5 #6 #8) #8) #14 std-tie-breaker #8)(#4 (#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 list #5 #15 #3 () #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 1) #15 #2 null? #5 #10 (#0 (0 . 0) #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #4 (#3 () #7 #0 (1 . 0) #15 #0 (0 . 0) #15 #2 memq #5 #10 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #0 (1 . 0) #15 #0 (2 . 0) #6 #8) (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 () #7 #0 (0 . 0) #15 #0 (4 . 0) #5 #15 #2 append #5 #15 #3 () #7 #0 (1 . 0) #15 #0 (0 . 0) #15 #2 cons #5 #15 #0 (2 . 0) #6 #8) #8) #6 #8) #8) #11 (0 . 0) #8) #5 #6 #8) #8) #14 build-transitive-closure #8)(#4 (#4 (#3 () #7 #3 () #15 #3 () #15 #3 () #7 #0 (0 . 0) #15 #3 () #7 #0 (1 . 0) #15 #2 build-transitive-closure #5 #5 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #2 null? #6 #8) #15 #3 () #7 #0 (0 . 1) #15 #2 null? #5 #15 #4 (#0 (0 . 0) #10 (#0 (0 . 0) #8) (#3 () #7 #0 (0 . 1) #6 #8) #8) #5 #10 (#3 () #7 #0 (0 . 0) #15 #2 null? #5 #10 (#0 (0 . 2) #8) (#3 () #7 #0 (0 . 2) #15 #3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #0 (3 . 0) #5 #15 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 cons #5 #15 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #0 (1 . 0) #6 #8) #8) (#3 () #7 #3 () #7 #0 (0 . 2) #15 #3 () #7 #3 () #7 #0 (0 . 1) #15 #2 cadr #5 #15 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #2 list #5 #15 #2 cons #5 #15 #3 () #7 #0 (0 . 1) #15 #2 cdr #5 #15 #0 (0 . 0) #15 #0 (1 . 0) #6 #8) #8) #11 (0 . 0) #8) #5 #6 #8) #8) #14 build-constraints #8)(#3 "1.3" #14 tiny-clos-version #8)(#3 ((put 'letrec 'lisp-indent-hook 1) (put 'make-method 'lisp-indent-hook 1) (put 'add-method 'lisp-indent-hook 'defun)) #8)(#3 () #7 #3 () #7 #3 secdr #15 #2 what-scheme-implementation #15 #2 eq? #5 #15 #2 not #5 #10 (#3 () #7 #3 "support.scm" #15 #2 load #6 #8) (#3 #f #8) #8)(#4 (#3 () #7 #0 (0 . 1) #15 #4 (#3 () #7 #3 "An instance isn't a procedure -- can't apply it." #15 #2 error #6 #8) #15 #3 #t #15 #0 (0 . 0) #15 #2 %allocate-instance-internal #6 #8) #14 %allocate-instance #8)(#4 (#3 () #7 #0 (0 . 1) #15 #4 (#3 () #7 #3 "Tried to call an entity before its proc is set." #15 #2 error #6 #8) #15 #3 #f #15 #0 (0 . 0) #15 #2 %allocate-instance-internal #6 #8) #14 %allocate-entity #8)(#2 ??? #14 %allocate-instance-internal #8)(#2 ??? #14 %instance? #8)(#2 ??? #14 %instance-class #8)(#2 ??? #14 %set-instance-class-to-self #8)(#2 ??? #14 %set-instance-proc! #8)(#2 ??? #14 %instance-ref #8)(#2 ??? #14 %instance-set! #8)(#3 () #7 #3 () #15 #3 () #15 #4 (#3 () #11 (0 . 0) #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #0 (0 . 0) #15 #2 assq #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 0) #15 #2 cdr #6 #8) (#3 #f #8) #8) #6 #8) #11 (0 . 1) #4 (#3 () #7 #3 () #15 #3 () #15 #4 (#3 () #7 #3 #f #15 #3 () #7 #3 3 #15 #0 (1 . 3) #15 #2 + #5 #15 #2 make-vector #5 #11 (0 . 0) #4 (#3 () #7 #1 (0 . 0) #15 #3 () #7 #3 0 #15 #0 (1 . 0) #15 #2 vector-ref #5 #15 #2 apply #6 #8) #11 (0 . 1) #3 () #7 #0 (1 . 2) #15 #3 0 #15 #0 (0 . 0) #15 #2 vector-set! #5 #3 () #7 #0 (1 . 1) #15 #3 1 #15 #0 (0 . 0) #15 #2 vector-set! #5 #3 () #7 #0 (1 . 0) #15 #3 2 #15 #0 (0 . 0) #15 #2 vector-set! #5 #3 () #7 #0 (2 . 0) #15 #3 () #7 #0 (0 . 0) #15 #0 (0 . 1) #15 #2 cons #5 #15 #2 cons #5 #11 (2 . 0) #0 (0 . 1) #8) #6 #8) #13 %allocate-instance-internal #4 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #0 (1 . 1) #5 #15 #2 null? #5 #15 #2 not #6 #8) #13 %instance? #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #0 (1 . 1) #5 #15 #4 (#3 () #7 #3 2 #15 #0 (0 . 0) #15 #2 vector-ref #6 #8) #6 #8) #13 %instance-class #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #0 (1 . 1) #5 #15 #4 (#3 () #7 #0 (1 . 0) #15 #3 2 #15 #0 (0 . 0) #15 #2 vector-set! #6 #8) #6 #8) #13 %set-instance-class-to-self #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #0 (1 . 1) #5 #15 #4 (#3 () #7 #3 1 #15 #0 (0 . 0) #15 #2 vector-ref #5 #10 (#3 () #7 #3 "Can't set procedure of instance." #15 #2 error #6 #8) (#3 () #7 #0 (1 . 1) #15 #3 0 #15 #0 (0 . 0) #15 #2 vector-set! #6 #8) #8) #6 #8) #13 %set-instance-proc! #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #0 (1 . 1) #5 #15 #4 (#3 () #7 #3 () #7 #3 3 #15 #0 (1 . 1) #15 #2 + #5 #15 #0 (0 . 0) #15 #2 vector-ref #6 #8) #6 #8) #13 %instance-ref #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #0 (1 . 1) #5 #15 #4 (#3 () #7 #0 (1 . 2) #15 #3 () #7 #3 3 #15 #0 (1 . 1) #15 #2 + #5 #15 #0 (0 . 0) #15 #2 vector-set! #6 #8) #6 #8) #13 %instance-set! #8) #6 #8)(#4 (#3 () #7 #0 (0 . 0) #15 #2 %instance? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 %instance-class #6 #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 boolean? #5 #10 (#3 () #7 #4 (#2 <boolean> #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 symbol? #5 #10 (#3 () #7 #4 (#2 <symbol> #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 char? #5 #10 (#3 () #7 #4 (#2 <char> #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 vector? #5 #10 (#3 () #7 #4 (#2 <vector> #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 pair? #5 #10 (#3 () #7 #4 (#2 <pair> #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 number? #5 #10 (#3 () #7 #4 (#2 <number> #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 string? #5 #10 (#3 () #7 #4 (#2 <string> #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #2 procedure? #5 #10 (#3 () #7 #4 (#2 <procedure> #8) #6 #8) (#3 () #8) #8) #8) #8) #8) #8) #8) #8) #8) #8) #14 class-of #8)(#4 (#3 () #7 #4 (#3 () #7 #2 <entity-class> #15 #0 (1 . 0) #15 #2 eq? #6 #8) #15 #3 () #7 #2 <class> #15 #0 (0 . 0) #15 #2 eq? #5 #15 #4 (#0 (0 . 0) #10 (#0 (0 . 0) #8) (#3 () #7 #0 (0 . 1) #6 #8) #8) #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #2 the-slots-of-a-class #15 #2 length #5 #15 #0 (1 . 0) #15 #2 %allocate-instance #5 #15 #4 (#3 () #7 #3 () #7 #3 () #15 #3 direct-supers #15 #1 (2 . 1) #15 #2 getl #5 #15 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 direct-slots #15 #1 (3 . 1) #15 #2 getl #5 #15 #2 list #15 #2 map #5 #15 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 list #5 #15 #0 (1 . 0) #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 null? #5 #10 (#3 () #7 #0 (0 . 1) #15 #2 reverse #6 #8) (#3 () #7 #3 () #7 #0 (0 . 1) #15 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 class-direct-supers #5 #15 #0 (1 . 0) #6 #8) #8) #11 (0 . 0) #8) #5 #5 #15 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 class-direct-slots #15 #2 map #5 #15 #0 (1 . 0) #15 #2 cons #5 #15 #2 append #15 #2 apply #5 #15 #4 (#3 () #7 #3 0 #15 #4 (#3 () #7 #3 () #15 #4 (#3 () #7 #4 (#3 () #7 #0 (2 . 0) #15 #4 (#3 () #7 #3 1 #15 #0 (3 . 0) #15 #2 + #5 #11 (3 . 0) #3 () #7 #0 (2 . 0) #15 #0 (1 . 0) #15 #2 cons #5 #11 (2 . 0) #3 () #7 #4 (#3 () #7 #0 (0 . 1) #15 #0 (1 . 0) #15 #0 (0 . 0) #15 #2 %instance-set! #6 #8) #15 #4 (#3 () #7 #0 (1 . 0) #15 #0 (0 . 0) #15 #2 %instance-ref #6 #8) #15 #2 list #6 #8) #6 #8) #15 #4 (#3 () #7 #3 () #7 #0 (3 . 0) #15 #4 (#3 () #7 #3 () #7 #4 (#3 () #8) #15 #0 (1 . 0) #5 #15 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 cons #6 #8) #15 #2 map #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (8 . 0) #15 #3 direct-supers #15 #0 (9 . 0) #15 #2 slot-set! #5 #3 () #7 #0 (7 . 0) #15 #3 direct-slots #15 #0 (9 . 0) #15 #2 slot-set! #5 #3 () #7 #0 (6 . 0) #15 #3 cpl #15 #0 (9 . 0) #15 #2 slot-set! #5 #3 () #7 #0 (5 . 0) #15 #3 slots #15 #0 (9 . 0) #15 #2 slot-set! #5 #3 () #7 #0 (4 . 0) #15 #3 nfields #15 #0 (9 . 0) #15 #2 slot-set! #5 #3 () #7 #3 () #7 #0 (3 . 0) #15 #2 reverse #5 #15 #3 field-initializers #15 #0 (9 . 0) #15 #2 slot-set! #5 #3 () #7 #0 (1 . 0) #15 #3 getters-n-setters #15 #0 (9 . 0) #15 #2 slot-set! #5 #0 (9 . 0) #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) (#3 () #7 #2 <generic> #15 #0 (0 . 0) #15 #2 eq? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-slots #5 #15 #2 length #5 #15 #0 (1 . 0) #15 #2 %allocate-entity #5 #15 #4 (#3 () #7 #3 () #15 #3 methods #15 #0 (0 . 0) #15 #2 slot-set! #5 #0 (0 . 0) #8) #6 #8) #6 #8) (#3 () #7 #2 <method> #15 #0 (0 . 0) #15 #2 eq? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 class-slots #5 #15 #2 length #5 #15 #0 (1 . 0) #15 #2 %allocate-instance #5 #15 #4 (#3 () #7 #3 () #7 #3 specializers #15 #1 (2 . 1) #15 #2 getl #5 #15 #3 specializers #15 #0 (0 . 0) #15 #2 slot-set! #5 #3 () #7 #3 () #7 #3 procedure #15 #1 (2 . 1) #15 #2 getl #5 #15 #3 procedure #15 #0 (0 . 0) #15 #2 slot-set! #5 #0 (0 . 0) #8) #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #14 make #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 1) #15 #3 () #7 #0 (0 . 0) #15 #2 class-of #5 #15 #2 lookup-slot-info #5 #15 #4 (#3 () #7 #3 () #7 #3 0 #15 #0 (0 . 0) #15 #2 list-ref #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (3 . 0) #15 #0 (1 . 0) #6 #8) #6 #8) #6 #8) #6 #8) #14 slot-ref #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 1) #15 #3 () #7 #0 (0 . 0) #15 #2 class-of #5 #15 #2 lookup-slot-info #5 #15 #4 (#3 () #7 #3 () #7 #3 1 #15 #0 (0 . 0) #15 #2 list-ref #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (3 . 2) #15 #0 (3 . 0) #15 #0 (1 . 0) #6 #8) #6 #8) #6 #8) #6 #8) #14 slot-set! #8)(#4 (#3 () #7 #3 () #7 #2 <class> #15 #0 (0 . 0) #15 #2 eq? #5 #9 (#2 getters-n-setters-for-class #8) (#3 () #7 #3 getters-n-setters #15 #0 (0 . 0) #15 #2 slot-ref #6 #8) #15 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #0 (1 . 1) #15 #2 assq #5 #15 #4 (#3 () #7 #4 (#0 (1 . 0) #10 (#3 () #7 #0 (1 . 0) #15 #2 cdr #6 #8) (#3 () #7 #0 (3 . 0) #15 #3 "in instances of" #15 #0 (3 . 1) #15 #3 "No slot" #15 #2 error #6 #8) #8) #6 #8) #6 #8) #6 #8) #14 lookup-slot-info #8)(#4 (#3 () #7 #3 direct-slots #15 #0 (0 . 0) #15 #2 slot-ref #6 #8) #14 class-direct-slots #8)(#4 (#3 () #7 #3 direct-supers #15 #0 (0 . 0) #15 #2 slot-ref #6 #8) #14 class-direct-supers #8)(#4 (#3 () #7 #3 slots #15 #0 (0 . 0) #15 #2 slot-ref #6 #8) #14 class-slots #8)(#4 (#3 () #7 #3 cpl #15 #0 (0 . 0) #15 #2 slot-ref #6 #8) #14 class-cpl #8)(#4 (#3 () #7 #3 methods #15 #0 (0 . 0) #15 #2 slot-ref #6 #8) #14 generic-methods #8)(#4 (#3 () #7 #3 specializers #15 #0 (0 . 0) #15 #2 slot-ref #6 #8) #14 method-specializers #8)(#4 (#3 () #7 #3 procedure #15 #0 (0 . 0) #15 #2 slot-ref #6 #8) #14 method-procedure #8)(#3 (direct-supers direct-slots cpl slots nfields field-initializers getters-n-setters) #14 the-slots-of-a-class #8)(#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #0 (0 . 1) #15 #0 (1 . 1) #15 #0 (0 . 0) #15 #2 %instance-set! #6 #8) #15 #4 (#3 () #7 #0 (1 . 1) #15 #0 (0 . 0) #15 #2 %instance-ref #6 #8) #15 #0 (0 . 0) #15 #2 list #6 #8) #15 #4 (#3 () #7 #2 the-slots-of-a-class #15 #4 (#3 () #7 #3 () #7 #2 the-slots-of-a-class #15 #0 (0 . 0) #15 #2 position-of #5 #15 #0 (0 . 0) #15 #0 (1 . 0) #6 #8) #15 #2 map #6 #8) #5 #14 getters-n-setters-for-class #8)(#3 () #7 #3 () #7 #2 the-slots-of-a-class #15 #2 length #5 #15 #3 #f #15 #2 %allocate-instance #5 #14 <class> #8)(#3 () #7 #2 <class> #15 #2 %set-instance-class-to-self #6 #8)(#3 () #7 #3 () #7 #2 list #5 #15 #3 direct-slots #15 #3 () #7 #2 list #5 #15 #3 direct-supers #15 #2 <class> #15 #2 make #5 #14 <top> #8)(#3 () #7 #3 () #7 #2 list #5 #15 #3 direct-slots #15 #3 () #7 #2 <top> #15 #2 list #5 #15 #3 direct-supers #15 #2 <class> #15 #2 make #5 #14 <object> #8)(#3 () #7 #3 () #7 #2 <object> #15 #2 list #5 #15 #3 direct-supers #15 #2 <class> #15 #2 slot-set! #6 #8)(#3 () #7 #3 () #7 #2 the-slots-of-a-class #15 #2 list #15 #2 map #5 #15 #3 direct-slots #15 #2 <class> #15 #2 slot-set! #6 #8)(#3 () #7 #3 () #7 #2 <top> #15 #2 <object> #15 #2 <class> #15 #2 list #5 #15 #3 cpl #15 #2 <class> #15 #2 slot-set! #6 #8)(#3 () #7 #3 () #7 #2 the-slots-of-a-class #15 #2 list #15 #2 map #5 #15 #3 slots #15 #2 <class> #15 #2 slot-set! #6 #8)(#3 () #7 #3 () #7 #2 the-slots-of-a-class #15 #2 length #5 #15 #3 nfields #15 #2 <class> #15 #2 slot-set! #6 #8)(#3 () #7 #3 () #7 #2 the-slots-of-a-class #15 #4 (#4 (#3 () #8) #8) #15 #2 map #5 #15 #3 field-initializers #15 #2 <class> #15 #2 slot-set! #6 #8)(#3 () #7 #3 () #15 #3 getters-n-setters #15 #2 <class> #15 #2 slot-set! #6 #8)(#3 () #7 #3 () #7 #2 list #5 #15 #3 direct-slots #15 #3 () #7 #2 <class> #15 #2 list #5 #15 #3 direct-supers #15 #2 <class> #15 #2 make #5 #14 <procedure-class> #8)(#3 () #7 #3 () #7 #2 list #5 #15 #3 direct-slots #15 #3 () #7 #2 <procedure-class> #15 #2 list #5 #15 #3 direct-supers #15 #2 <class> #15 #2 make #5 #14 <entity-class> #8)(#3 () #7 #3 () #7 #3 methods #15 #2 list #5 #15 #3 direct-slots #15 #3 () #7 #2 <object> #15 #2 list #5 #15 #3 direct-supers #15 #2 <entity-class> #15 #2 make #5 #14 <generic> #8)(#3 () #7 #3 () #7 #3 procedure #15 #3 specializers #15 #2 list #5 #15 #3 direct-slots #15 #3 () #7 #2 <object> #15 #2 list #5 #15 #3 direct-supers #15 #2 <class> #15 #2 make #5 #14 <method> #8)(#4 (#3 () #7 #0 (0 . 1) #15 #3 direct-slots #15 #0 (0 . 0) #15 #3 direct-supers #15 #2 <class> #15 #2 make #6 #8) #14 make-class #8)(#4 (#3 () #7 #2 <generic> #15 #2 make #6 #8) #14 make-generic #8)(#4 (#3 () #7 #0 (0 . 1) #15 #3 procedure #15 #0 (0 . 0) #15 #3 specializers #15 #2 <method> #15 #2 make #6 #8) #14 make-method #8)(#3 () #7 #2 make-generic #5 #14 initialize #8)(#3 () #7 #2 make-generic #5 #14 allocate-instance #8)(#3 () #7 #2 make-generic #5 #14 compute-getter-and-setter #8)(#3 () #7 #2 make-generic #5 #14 compute-cpl #8)(#3 () #7 #2 make-generic #5 #14 compute-slots #8)(#3 () #7 #2 make-generic #5 #14 compute-apply-generic #8)(#3 () #7 #2 make-generic #5 #14 compute-methods #8)(#3 () #7 #2 make-generic #5 #14 compute-method-more-specific? #8)(#3 () #7 #2 make-generic #5 #14 compute-apply-methods #8)(#3 () #7 #2 compute-apply-methods #15 #2 compute-method-more-specific? #15 #2 compute-methods #15 #2 compute-apply-generic #15 #2 list #5 #14 generic-invocation-generics #8)(#4 (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 methods #15 #0 (0 . 0) #15 #2 slot-ref #5 #15 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 method-specializers #5 #15 #3 () #7 #0 (0 . 0) #15 #2 method-specializers #5 #15 #2 eq? #15 #2 every #5 #15 #2 not #6 #8) #15 #2 filter-in #5 #15 #0 (0 . 1) #15 #2 cons #5 #15 #3 methods #15 #0 (0 . 0) #15 #2 slot-set! #5 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 compute-apply-generic #5 #15 #0 (0 . 0) #15 #2 %set-instance-proc! #6 #8) #14 add-method #8)(#3 () #7 #4 (#4 (#3 () #7 #3 () #7 #1 (0 . 0) #15 #3 #f #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 generic-methods #5 #15 #2 car #5 #15 #2 method-procedure #5 #15 #2 apply #6 #8) #8) #15 #2 compute-apply-generic #15 #2 %set-instance-proc! #6 #8)(#3 () #7 #3 () #7 #4 (#4 (#3 () #7 #4 (#3 () #7 #2 generic-invocation-generics #15 #3 () #7 #1 (1 . 0) #15 #2 car #5 #15 #2 memq #6 #8) #15 #3 () #7 #2 generic-invocation-generics #15 #0 (1 . 1) #15 #2 memq #5 #15 #4 (#0 (0 . 0) #10 (#3 () #7 #0 (0 . 1) #6 #8) (#0 (0 . 0) #8) #8) #5 #10 (#3 () #7 #3 () #7 #1 (0 . 0) #15 #3 #f #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 generic-methods #5 #15 #2 last #5 #15 #2 method-procedure #5 #15 #2 apply #6 #8) (#3 () #7 #1 (0 . 0) #15 #3 () #7 #1 (0 . 0) #15 #3 () #7 #0 (1 . 1) #15 #2 compute-methods #5 #5 #15 #3 () #7 #0 (1 . 1) #15 #2 compute-apply-methods #5 #6 #8) #8) #8) #15 #3 () #7 #2 <generic> #15 #2 list #5 #15 #2 make-method #5 #15 #2 compute-apply-generic #15 #2 add-method #6 #8)(#3 () #7 #3 () #7 #4 (#4 (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 generic-methods #5 #15 #4 (#3 () #7 #0 (1 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 method-specializers #5 #15 #2 applicable? #15 #2 every #6 #8) #15 #2 filter-in #5 #15 #4 (#3 () #7 #0 (0 . 0) #15 #4 (#3 () #7 #0 (2 . 0) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #3 () #7 #0 (3 . 1) #15 #2 compute-method-more-specific? #5 #6 #8) #15 #2 gsort #6 #8) #6 #8) #8) #15 #3 () #7 #2 <generic> #15 #2 list #5 #15 #2 make-method #5 #15 #2 compute-methods #15 #2 add-method #6 #8)(#3 () #7 #3 () #7 #4 (#4 (#3 () #7 #0 (0 . 2) #15 #3 () #7 #0 (0 . 1) #15 #2 method-specializers #5 #15 #3 () #7 #0 (0 . 0) #15 #2 method-specializers #5 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #7 #3 #t #15 #2 return #6 #8) #6 #8) (#3 () #7 #0 (0 . 1) #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #7 #3 #f #15 #2 return #6 #8) #6 #8) (#3 () #7 #0 (0 . 2) #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #7 #3 "Fewer arguments than specializers." #15 #2 error #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 2) #15 #2 car #5 #15 #3 () #7 #0 (1 . 1) #15 #2 car #5 #15 #3 () #7 #0 (1 . 0) #15 #2 car #5 #15 #4 (#3 () #7 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 eq? #5 #10 (#3 () #7 #3 () #7 #0 (2 . 2) #15 #2 cdr #5 #15 #3 () #7 #0 (2 . 1) #15 #2 cdr #5 #15 #3 () #7 #0 (2 . 0) #15 #2 cdr #5 #15 #0 (3 . 0) #6 #8) (#3 () #7 #0 (0 . 2) #15 #0 (0 . 1) #15 #0 (0 . 0) #15 #2 more-specific? #6 #8) #8) #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #8) #11 (0 . 0) #8) #5 #6 #8) #8) #15 #3 () #7 #2 <generic> #15 #2 list #5 #15 #2 make-method #5 #15 #2 compute-method-more-specific? #15 #2 add-method #6 #8)(#3 () #7 #3 () #7 #4 (#4 (#3 () #7 #3 () #15 #4 (#4 (#4 (#3 () #7 #0 (1 . 0) #15 #2 null? #5 #10 (#3 () #7 #3 "No applicable methods/next methods." #15 #2 error #6 #8) (#3 () #7 #3 () #7 #0 (3 . 1) #15 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 cdr #5 #15 #0 (2 . 0) #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 car #5 #15 #2 method-procedure #5 #15 #2 apply #6 #8) #8) #8) #11 (0 . 0) #3 () #7 #3 () #7 #0 (1 . 0) #15 #0 (0 . 0) #5 #6 #8) #6 #8) #8) #15 #3 () #7 #2 <generic> #15 #2 list #5 #15 #2 make-method #5 #15 #2 compute-apply-methods #15 #2 add-method #6 #8)(#4 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 1) #15 #2 class-of #5 #15 #2 class-cpl #5 #15 #0 (0 . 0) #15 #2 memq #6 #8) #14 applicable? #8)(#4 (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #0 (0 . 2) #15 #2 class-of #5 #15 #2 class-cpl #5 #15 #0 (0 . 0) #15 #2 memq #5 #15 #0 (0 . 1) #15 #2 memq #6 #8) #14 more-specific? #8)(#3 () #7 #3 () #7 #4 (#0 (0 . 1) #8) #15 #3 () #7 #2 <object> #15 #2 list #5 #15 #2 make-method #5 #15 #2 initialize #15 #2 add-method #6 #8)(#3 () #7 #3 () #7 #4 (#3 () #7 #0 (0 . 0) #5 #3 () #7 #3 () #7 #3 () #15 #3 direct-supers #15 #0 (0 . 2) #15 #2 getl #5 #15 #3 direct-supers #15 #0 (0 . 1) #15 #2 slot-set! #5 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 direct-slots #15 #0 (0 . 2) #15 #2 getl #5 #15 #4 (#3 () #7 #0 (0 . 0) #15 #2 pair? #5 #10 (#0 (0 . 0) #8) (#3 () #7 #0 (0 . 0) #15 #2 list #6 #8) #8) #15 #2 map #5 #15 #3 direct-slots #15 #0 (0 . 1) #15 #2 slot-set! #5 #3 () #7 #3 () #7 #0 (0 . 1) #15 #2 compute-cpl #5 #15 #3 cpl #15 #0 (0 . 1) #15 #2 slot-set! #5 #3 () #7 #3 () #7 #0 (0 . 1) #15 #2 compute-slots #5 #15 #3 slots #15 #0 (0 . 1) #15 #2 slot-set! #5 #3 () #7 #3 0 #15 #4 (#3 () #7 #3 () #15 #4 (#3 () #7 #4 (#3 () #7 #0 (2 . 0) #15 #4 (#3 () #7 #3 1 #15 #0 (3 . 0) #15 #2 + #5 #11 (3 . 0) #3 () #7 #0 (2 . 0) #15 #0 (1 . 0) #15 #2 cons #5 #11 (2 . 0) #3 () #7 #4 (#3 () #7 #0 (0 . 1) #15 #0 (1 . 0) #15 #0 (0 . 0) #15 #2 %instance-set! #6 #8) #15 #4 (#3 () #7 #0 (1 . 0) #15 #0 (0 . 0) #15 #2 %instance-ref #6 #8) #15 #2 list #6 #8) #6 #8) #15 #4 (#3 () #7 #3 () #7 #3 () #7 #3 slots #15 #0 (3 . 1) #15 #2 slot-ref #5 #15 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #0 (0 . 0) #15 #0 (4 . 1) #15 #2 compute-getter-and-setter #5 #15 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 cons #6 #8) #15 #2 map #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (4 . 0) #15 #3 nfields #15 #0 (5 . 1) #15 #2 slot-set! #5 #3 () #7 #0 (3 . 0) #15 #3 field-initializers #15 #0 (5 . 1) #15 #2 slot-set! #5 #3 () #7 #0 (1 . 0) #15 #3 getters-n-setters #15 #0 (5 . 1) #15 #2 slot-set! #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #15 #3 () #7 #2 <class> #15 #2 list #5 #15 #2 make-method #5 #15 #2 initialize #15 #2 add-method #6 #8)(#3 () #7 #3 () #7 #4 (#3 () #7 #0 (0 . 0) #5 #3 () #7 #3 () #15 #3 methods #15 #0 (0 . 1) #15 #2 slot-set! #5 #3 () #7 #4 (#3 () #7 #3 "Has no methods." #15 #2 error #6 #8) #15 #0 (0 . 1) #15 #2 %set-instance-proc! #6 #8) #15 #3 () #7 #2 <generic> #15 #2 list #5 #15 #2 make-method #5 #15 #2 initialize #15 #2 add-method #6 #8)(#3 () #7 #3 () #7 #4 (#3 () #7 #0 (0 . 0) #5 #3 () #7 #3 () #7 #3 specializers #15 #0 (0 . 2) #15 #2 getl #5 #15 #3 specializers #15 #0 (0 . 1) #15 #2 slot-set! #5 #3 () #7 #3 () #7 #3 procedure #15 #0 (0 . 2) #15 #2 getl #5 #15 #3 procedure #15 #0 (0 . 1) #15 #2 slot-set! #6 #8) #15 #3 () #7 #2 <method> #15 #2 list #5 #15 #2 make-method #5 #15 #2 initialize #15 #2 add-method #6 #8)(#3 () #7 #3 () #7 #4 (#3 () #7 #3 () #7 #3 field-initializers #15 #0 (0 . 1) #15 #2 slot-ref #5 #15 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 length #5 #15 #0 (1 . 1) #15 #2 %allocate-instance #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (2 . 0) #15 #3 0 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 1) #15 #2 pair? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 car #5 #5 #15 #0 (1 . 0) #15 #0 (4 . 0) #15 #2 %instance-set! #5 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 () #7 #3 1 #15 #0 (1 . 0) #15 #2 + #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#0 (3 . 0) #8) #8) #11 (0 . 0) #8) #5 #6 #8) #6 #8) #6 #8) #6 #8) #15 #3 () #7 #2 <class> #15 #2 list #5 #15 #2 make-method #5 #15 #2 allocate-instance #15 #2 add-method #6 #8)(#3 () #7 #3 () #7 #4 (#3 () #7 #3 () #7 #3 field-initializers #15 #0 (0 . 1) #15 #2 slot-ref #5 #15 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 length #5 #15 #0 (1 . 1) #15 #2 %allocate-entity #5 #15 #4 (#3 () #7 #4 (#3 () #7 #0 (2 . 0) #15 #3 0 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 1) #15 #2 pair? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 car #5 #5 #15 #0 (1 . 0) #15 #0 (4 . 0) #15 #2 %instance-set! #5 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #3 () #7 #3 1 #15 #0 (1 . 0) #15 #2 + #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#0 (3 . 0) #8) #8) #11 (0 . 0) #8) #5 #6 #8) #6 #8) #6 #8) #6 #8) #15 #3 () #7 #2 <entity-class> #15 #2 list #5 #15 #2 make-method #5 #15 #2 allocate-instance #15 #2 add-method #6 #8)(#3 () #7 #3 () #7 #4 (#3 () #7 #2 class-direct-supers #15 #0 (0 . 1) #15 #2 compute-std-cpl #6 #8) #15 #3 () #7 #2 <class> #15 #2 list #5 #15 #2 make-method #5 #15 #2 compute-cpl #15 #2 add-method #6 #8)(#3 () #7 #3 () #7 #4 (#3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #0 (0 . 1) #15 #2 class-cpl #5 #15 #2 class-direct-slots #15 #2 map #5 #15 #2 append #15 #2 apply #5 #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 null? #5 #10 (#3 () #7 #0 (0 . 1) #15 #2 reverse #6 #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #4 (#3 () #7 #3 () #15 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (3 . 0) #15 #2 cdr #5 #15 #4 (#3 () #7 #0 (2 . 0) #15 #3 () #7 #0 (0 . 0) #15 #2 car #5 #15 #2 eq? #5 #10 (#3 () #7 #4 (#3 () #7 #0 (2 . 0) #15 #0 (1 . 0) #15 #2 cons #5 #11 (2 . 0) #3 #f #8) #6 #8) (#3 #t #8) #8) #15 #2 collect-if #5 #15 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (5 . 1) #15 #3 () #7 #3 () #7 #3 () #7 #0 (2 . 0) #15 #2 cdr #15 #2 map #5 #15 #2 append #15 #2 apply #5 #15 #0 (4 . 0) #15 #2 append #5 #15 #2 cons #5 #15 #0 (1 . 0) #15 #0 (6 . 0) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #6 #8) #8) #11 (0 . 0) #8) #5 #6 #8) #15 #3 () #7 #2 <class> #15 #2 list #5 #15 #2 make-method #5 #15 #2 compute-slots #15 #2 add-method #6 #8)(#3 () #7 #3 () #7 #4 (#3 () #7 #4 (#3 () #8) #15 #0 (0 . 3) #6 #8) #15 #3 () #7 #2 <class> #15 #2 list #5 #15 #2 make-method #5 #15 #2 compute-getter-and-setter #15 #2 add-method #6 #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 allocate-instance #5 #15 #4 (#3 () #7 #1 (1 . 1) #15 #0 (0 . 0) #15 #2 initialize #5 #0 (0 . 0) #8) #6 #8) #13 make #8)(#3 () #7 #3 () #7 #2 list #5 #15 #3 direct-slots #15 #3 () #7 #2 <class> #15 #2 list #5 #15 #3 direct-supers #15 #2 <class> #15 #2 make #5 #14 <primitive-class> #8)(#4 (#3 () #7 #3 () #7 #2 list #5 #15 #3 direct-slots #15 #3 () #7 #2 <top> #15 #2 list #5 #15 #3 direct-supers #15 #3 () #7 #1 (0 . 0) #15 #2 null? #5 #9 (#2 <primitive-class> #8) (#3 () #7 #1 (0 . 0) #15 #2 car #6 #8) #15 #2 make #6 #8) #14 make-primitive-class #8)(#3 () #7 #2 make-primitive-class #5 #14 <boolean> #8)(#3 () #7 #2 make-primitive-class #5 #14 <symbol> #8)(#3 () #7 #2 make-primitive-class #5 #14 <char> #8)(#3 () #7 #2 make-primitive-class #5 #14 <vector> #8)(#3 () #7 #2 make-primitive-class #5 #14 <pair> #8)(#3 () #7 #2 make-primitive-class #5 #14 <number> #8)(#3 () #7 #2 make-primitive-class #5 #14 <string> #8)(#3 () #7 #2 <procedure-class> #15 #2 make-primitive-class #5 #14 <procedure> #8)(#3 tiny-clos-up-and-running #8)