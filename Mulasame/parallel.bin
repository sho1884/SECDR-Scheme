(#4 (#3 () #7 #0 (0 . 0) #15 #3 0 #15 #2 = #5 #10 (#2 nil #8) (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 -1+ #5 #15 #2 ngencpu #5 #15 #3 () #7 #2 gencpu #5 #15 #2 cons #6 #8) #8) #14 ngencpu #8)(#3 () #7 #2 gensemaphore #5 #14 console-semaphore #8)(#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #3 ((signal console-semaphore)) #15 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 append #5 #15 #3 (wait console-semaphore) #15 #2 cons #5 #15 #3 begin #15 #2 cons #6 #8) #15 #3 %macro-special-form% #15 #3 iostream #15 #2 put #5 #3 iostream #8) #6 #8)(#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 ((%task-switch-on%) ans) #15 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #3 begin #15 #2 cons #5 #15 #2 cons #5 #15 #3 ans #15 #2 cons #5 #15 #2 cons #5 #15 #2 cons #5 #15 #3 let #15 #2 cons #5 #15 #2 cons #5 #15 #3 (%task-switch-off%) #15 #2 cons #5 #15 #3 begin #15 #2 cons #6 #8) #15 #3 %macro-special-form% #15 #3 exbegin #15 #2 put #5 #3 exbegin #8) #6 #8)(#4 (#3 () #7 #3 () #15 #3 () #15 #4 (#4 (#3 () #7 #3 "-------------------------------" #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 " K: KILL all sub-process" #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 " S: display S_register" #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 " E: display E_register" #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 " C: display C_register" #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 " D: display D_register" #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 " R: display R_register" #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 " A: disAssemble C_register" #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 " !: set! R_register" #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 " &: continue (quit this mode)" #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 " T: abort to scheme Top level" #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 "-------------------------------" #15 #2 display #5 #3 () #7 #2 newline #6 #8) #11 (0 . 0) #4 (#3 () #7 #3 "List of Commands: (K, S, E, C, D, R, A, !, &, T or Help) ? " #15 #2 display #5 #3 () #7 #3 #f #15 #3 () #7 #2 read #5 #15 #4 (#3 () #7 #3 #eof #15 #0 (0 . 0) #15 #2 eq? #5 #10 (#3 () #7 #4 (#3 () #7 #2 %reset-master% #5 #3 #v #8) #6 #8) (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #2 symbol? #5 #9 (#3 () #7 #3 0 #15 #3 () #7 #0 (1 . 0) #15 #2 symbol->string #5 #15 #2 string-ref #5 #11 (1 . 1) #8) (#3 #\# #11 (1 . 1) #8) #3 () #7 #3 #\s #15 #0 (1 . 1) #15 #2 char-ci=? #5 #10 (#3 () #7 #4 (#3 () #7 #3 " S: " #15 #2 display #5 #3 () #7 #3 () #7 #3 0 #15 #2 -*-error-register-*- #15 #2 list-ref #5 #15 #2 write #5 #3 () #7 #2 newline #5 #3 () #7 #0 (4 . 1) #6 #8) #6 #8) (#3 () #7 #3 #\e #15 #0 (1 . 1) #15 #2 char-ci=? #5 #10 (#3 () #7 #4 (#3 () #7 #3 " E: " #15 #2 display #5 #3 () #7 #3 () #7 #3 1 #15 #2 -*-error-register-*- #15 #2 list-ref #5 #15 #2 write #5 #3 () #7 #2 newline #5 #3 () #7 #0 (4 . 1) #6 #8) #6 #8) (#3 () #7 #3 #\k #15 #0 (1 . 1) #15 #2 char-ci=? #5 #10 (#3 () #7 #4 (#3 () #7 #3 " Error CPU:" #15 #2 display #5 #3 () #7 #2 -*-error-cpu-*- #15 #2 write #5 #3 () #7 #2 newline #5 #3 () #7 #3 " KILL: all sub-process : " #15 #2 display #5 #3 () #7 #2 -*-process-*- #15 #2 write #5 #3 () #7 #2 newline #5 #3 () #7 #3 "-*-process-*- -> -*-backup-process-*-" #15 #2 display #5 #3 () #7 #2 newline #5 #2 -*-process-*- #14 -*-backup-process-*- #2 nil #13 -*-process-*- #3 () #7 #2 gensemaphore #5 #14 console-semaphore #3 () #7 #3 " Console-Semaphore Reset!" #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #2 newline #5 #3 () #7 #0 (4 . 1) #6 #8) #6 #8) (#3 () #7 #3 #\c #15 #0 (1 . 1) #15 #2 char-ci=? #5 #10 (#3 () #7 #4 (#3 () #7 #3 " C: " #15 #2 display #5 #3 () #7 #3 () #7 #3 2 #15 #2 -*-error-register-*- #15 #2 list-ref #5 #15 #2 write #5 #3 () #7 #2 newline #5 #3 () #7 #0 (4 . 1) #6 #8) #6 #8) (#3 () #7 #3 #\a #15 #0 (1 . 1) #15 #2 char-ci=? #5 #10 (#3 () #7 #4 (#3 () #7 #3 " disAsmC: " #15 #2 display #5 #3 () #7 #3 () #7 #3 2 #15 #2 -*-error-register-*- #15 #2 list-ref #5 #15 #2 disassemble #5 #3 () #7 #2 newline #5 #3 () #7 #0 (4 . 1) #6 #8) #6 #8) (#3 () #7 #3 #\d #15 #0 (1 . 1) #15 #2 char-ci=? #5 #10 (#3 () #7 #4 (#3 () #7 #3 " D: " #15 #2 display #5 #3 () #7 #3 () #7 #3 3 #15 #2 -*-error-register-*- #15 #2 list-ref #5 #15 #2 write #5 #3 () #7 #2 newline #5 #3 () #7 #0 (4 . 1) #6 #8) #6 #8) (#3 () #7 #3 #\r #15 #0 (1 . 1) #15 #2 char-ci=? #5 #10 (#3 () #7 #4 (#3 () #7 #3 " R: " #15 #2 display #5 #3 () #7 #3 () #7 #3 4 #15 #2 -*-error-register-*- #15 #2 list-ref #5 #15 #2 write #5 #3 () #7 #2 newline #5 #3 () #7 #0 (4 . 1) #6 #8) #6 #8) (#3 () #7 #3 #\! #15 #0 (1 . 1) #15 #2 char-ci=? #5 #10 (#3 () #7 #4 (#3 () #7 #3 " R? " #15 #2 display #5 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #2 read #5 #15 #2 cons #5 #15 #3 () #7 #2 -*-error-register-*- #15 #2 cdddr #5 #15 #2 set-cdr! #5 #3 () #7 #2 -*-error-register-*- #15 #2 %list->master% #5 #3 () #7 #3 " R: " #15 #2 display #5 #3 () #7 #3 () #7 #3 4 #15 #2 -*-error-register-*- #15 #2 list-ref #5 #15 #2 write #5 #3 () #7 #2 newline #5 #3 () #7 #0 (4 . 1) #6 #8) #6 #8) (#3 () #7 #3 #\& #15 #0 (1 . 1) #15 #2 char-ci=? #5 #10 (#3 () #7 #4 (#3 #v #8) #6 #8) (#3 () #7 #3 #\t #15 #0 (1 . 1) #15 #2 char-ci=? #5 #10 (#3 () #7 #4 (#3 () #7 #2 %reset-master% #5 #3 #v #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #0 (4 . 0) #5 #3 () #7 #0 (4 . 1) #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #8) #8) #8) #8) #8) #8) #8) #8) #6 #8) #8) #6 #8) #11 (0 . 1) #3 () #7 #2 %master->list% #5 #13 -*-error-register-*- #3 () #7 #0 (0 . 1) #6 #8) #6 #8) #14 %my-error-hook% #8)(#2 %my-error-hook% #14 -*-error-hook-*- #8)(#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 1 #15 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 cddr #5 #15 #2 null? #5 #15 #2 not #5 #9 (#3 () #7 #0 (1 . 0) #15 #2 caddr #5 #11 (0 . 0) #8) (#3 #f #8) #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 0) #15 #2 cons #5 #15 #3 "future -- Cannot set CPU-Step : " #15 #2 cons #5 #15 #3 error #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 ((wakeup-cpu cpu) ans) #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 ((%cpu-step% cpu)) #15 #0 (0 . 0) #15 #2 cons #5 #15 #3 * #15 #2 cons #5 #15 #2 cons #5 #15 #3 round #15 #2 cons #5 #15 #2 cons #5 #15 #3 inexact->exact #15 #2 cons #5 #15 #2 cons #5 #15 #3 cpu #15 #2 cons #5 #15 #3 %cpu-step-set!% #15 #2 cons #5 #15 #2 cons #5 #15 #3 begin #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #0 (0 . 0) #15 #2 cons #5 #15 #3 number? #15 #2 cons #5 #15 #2 cons #5 #15 #3 if #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 (cpu) #15 #3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (1 . 0) #15 #2 cadr #5 #15 #2 cons #5 #15 #3 () #15 #2 cons #5 #15 #3 lambda #15 #2 cons #5 #15 #2 cons #5 #15 #3 migrate #15 #2 cons #5 #15 #2 cons #5 #15 #3 ans #15 #2 cons #5 #15 #2 cons #5 #15 #3 (cpu (gencpu)) #15 #2 cons #5 #15 #2 cons #5 #15 #3 let* #15 #2 cons #6 #8) #6 #8) #15 #3 %macro-special-form% #15 #3 future #15 #2 put #5 #3 future #8) #6 #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 %touch% #5 #15 #2 %ph-object% #6 #8) #14 touch #8)(#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (0 . 0) #15 #2 caddr #5 #15 #2 cons #5 #15 #3 future #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #0 (0 . 0) #15 #2 cadr #5 #15 #2 cons #5 #15 #3 cons #15 #2 cons #6 #8) #15 #3 %macro-special-form% #15 #3 fcons-stream #15 #2 put #5 #3 fcons-stream #8) #6 #8)(#4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 place-holder? #5 #10 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 touch #6 #8) (#3 () #7 #3 () #7 #0 (0 . 0) #15 #2 cdr #5 #15 #2 force #6 #8) #8) #14 tail #8)(#4 (#3 () #7 #4 (#3 () #7 #2 %task-switch-off% #5 #3 () #7 #3 () #7 #4 (#3 () #7 #3 "======================" #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 " terminate cpu:" #15 #2 display #5 #3 () #7 #3 () #7 #2 -*-terminate-*- #15 #2 length #5 #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 " active    cpu:" #15 #2 display #5 #3 () #7 #3 () #7 #2 -*-process-*- #15 #2 length #5 #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 " wait      cpu:" #15 #2 display #5 #3 () #7 #3 () #7 #2 -*-wait-process-*- #15 #2 length #5 #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 " sem wait  cpu:" #15 #2 display #5 #3 () #7 #3 () #7 #2 -*-sem-wait-process-*- #15 #2 length #5 #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 " error     cpu:" #15 #2 display #5 #3 () #7 #3 () #7 #2 -*-error-cpu-*- #15 #2 length #5 #15 #2 display #5 #3 () #7 #2 newline #5 #3 () #7 #3 "======================" #15 #2 display #5 #3 () #7 #2 newline #6 #8) #5 #15 #4 (#3 () #7 #2 %task-switch-on% #5 #0 (0 . 0) #8) #6 #8) #6 #8) #14 report #8)(#3 () #7 #4 (#3 () #7 #4 (#3 () #7 #0 (0 . 0) #15 #3 (cobegin x) #15 #3 (cobegin) #15 #2 syntax-match? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 (nil) #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (1 . 0) #15 #2 cadr #5 #15 #2 cons #5 #15 #3 future #15 #2 cons #5 #15 #2 cons #5 #15 #3 cons #15 #2 cons #6 #8) #6 #8) (#3 () #7 #0 (0 . 0) #15 #3 (cobegin x y ...) #15 #3 (cobegin) #15 #2 syntax-match? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 cddr #5 #15 #3 cobegin #15 #2 cons #5 #15 #2 cons #5 #15 #3 () #7 #3 () #7 #3 () #15 #3 () #7 #0 (1 . 0) #15 #2 cadr #5 #15 #2 cons #5 #15 #3 future #15 #2 cons #5 #15 #2 cons #5 #15 #3 cons #15 #2 cons #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 0) #15 #3 "invalid syntax " #15 #3 cobegin #15 #2 error #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #15 #3 %macro-special-form% #15 #3 cobegin #15 #2 put #5 #3 cobegin #8) #6 #8)(#4 (#3 () #7 #0 (0 . 0) #15 #2 null? #5 #10 (#2 nil #8) (#3 () #7 #0 (0 . 0) #15 #2 nil #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #0 (1 . 1) #15 #2 car #5 #15 #2 future? #5 #15 #2 not #6 #8) #15 #3 () #7 #0 (0 . 1) #15 #2 null? #5 #15 #4 (#0 (0 . 0) #10 (#0 (0 . 0) #8) (#3 () #7 #0 (0 . 1) #6 #8) #8) #5 #10 (#3 () #7 #4 (#3 () #7 #0 (1 . 1) #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #7 #2 %task-switch% #5 #3 () #7 #0 (4 . 0) #15 #2 race #6 #8) #6 #8) (#3 () #7 #0 (1 . 0) #15 #2 null? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #2 gencpu #5 #15 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #4 (#3 () #7 #3 () #7 #0 (6 . 0) #15 #2 cdr #5 #15 #2 race #6 #8) #15 #2 migrate #5 #15 #4 (#3 () #7 #4 (#3 () #7 #3 1 #15 #2 number? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 0) #15 #2 %cpu-step% #5 #15 #3 1 #15 #2 * #5 #15 #2 round #5 #15 #2 inexact->exact #5 #15 #0 (3 . 0) #15 #2 %cpu-step-set!% #5 #3 () #7 #0 (3 . 0) #15 #2 wakeup-cpu #5 #0 (2 . 0) #8) #6 #8) (#3 () #7 #3 1 #15 #3 "future -- Cannot set CPU-Step : " #15 #2 error #6 #8) #8) #6 #8) #6 #8) #5 #15 #3 () #7 #3 () #7 #0 (4 . 0) #15 #2 car #5 #15 #2 %ph-object% #5 #15 #2 cons #6 #8) #6 #8) (#2 else #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (2 . 1) #15 #2 cdr #5 #15 #0 (2 . 0) #15 #2 set-cdr! #5 #3 () #7 #3 () #7 #3 () #7 #2 gencpu #5 #15 #4 (#3 () #7 #3 () #7 #0 (0 . 0) #15 #4 (#3 () #7 #0 (6 . 0) #15 #2 race #6 #8) #15 #2 migrate #5 #15 #4 (#3 () #7 #4 (#3 () #7 #3 1 #15 #2 number? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #3 () #7 #3 () #7 #3 () #7 #0 (3 . 0) #15 #2 %cpu-step% #5 #15 #3 1 #15 #2 * #5 #15 #2 round #5 #15 #2 inexact->exact #5 #15 #0 (3 . 0) #15 #2 %cpu-step-set!% #5 #3 () #7 #0 (3 . 0) #15 #2 wakeup-cpu #5 #0 (2 . 0) #8) #6 #8) (#3 () #7 #3 1 #15 #3 "future -- Cannot set CPU-Step : " #15 #2 error #6 #8) #8) #6 #8) #6 #8) #5 #15 #3 () #7 #3 () #7 #0 (2 . 1) #15 #2 car #5 #15 #2 %ph-object% #5 #15 #2 cons #6 #8) #6 #8) (#3 () #8) #8) #8) #8) #6 #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 1) #15 #2 cdr #5 #15 #0 (1 . 1) #15 #0 (2 . 0) #6 #8) #6 #8) #8) #11 (0 . 0) #8) #5 #6 #8) #8) #14 race #8)(#4 (#3 () #7 #3 () #15 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 1) #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 1) #15 #2 tail #5 #15 #0 (0 . 0) #15 #0 (1 . 0) #5 #15 #3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #5 #15 #0 (0 . 0) #5 #15 #2 cons #6 #8) (#3 () #8) #8) #11 (0 . 0) #4 (#3 () #7 #0 (0 . 1) #15 #2 pair? #15 #2 every? #5 #10 (#3 () #7 #3 () #7 #3 () #7 #0 (0 . 1) #15 #2 tail #15 #0 (1 . 0) #5 #15 #0 (0 . 0) #15 #0 (1 . 1) #5 #15 #3 () #7 #3 () #7 #0 (0 . 1) #15 #2 car #15 #0 (1 . 0) #5 #15 #0 (0 . 0) #15 #2 apply #5 #15 #2 cons #6 #8) (#3 () #8) #8) #11 (0 . 1) #3 () #7 #1 (1 . 2) #15 #2 pair? #5 #10 (#3 () #7 #3 () #7 #1 (1 . 2) #15 #0 (1 . 1) #15 #2 cons #5 #15 #0 (1 . 0) #15 #0 (0 . 1) #6 #8) (#3 () #7 #0 (1 . 1) #15 #0 (1 . 0) #15 #0 (0 . 0) #6 #8) #8) #6 #8) #14 map #8)(#4 (#3 () #7 #1 (0 . 1) #15 #3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 pair? #15 #2 every? #5 #10 (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 car #15 #2 map #5 #15 #0 (3 . 0) #15 #2 apply #5 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 tail #15 #2 map #5 #15 #0 (2 . 0) #6 #8) #6 #8) (#3 #v #8) #8) #11 (0 . 0) #8) #5 #6 #8) #14 for-each #8)(#3 () #7 #4 (#3 () #7 #3 () #15 #4 (#4 (#3 () #7 #0 (0 . 0) #15 #2 null? #5 #10 (#3 () #7 #3 "}" #15 #2 display #6 #8) (#3 () #7 #4 (#3 () #7 #3 " " #15 #2 display #5 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 head #5 #15 #2 write #5 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 tail #5 #15 #0 (2 . 0) #6 #8) #6 #8) #8) #11 (0 . 0) #4 (#3 () #7 #2 newline #5 #3 () #7 #3 "{" #15 #2 display #5 #3 () #7 #0 (0 . 0) #15 #2 null? #5 #10 (#3 () #7 #3 "}" #15 #2 display #6 #8) (#3 () #7 #4 (#3 () #7 #3 () #7 #0 (1 . 0) #15 #2 head #5 #15 #2 write #5 #3 () #7 #3 () #7 #0 (1 . 0) #15 #2 tail #5 #15 #0 (2 . 0) #6 #8) #6 #8) #8) #8) #6 #8) #5 #14 print-stream #8)